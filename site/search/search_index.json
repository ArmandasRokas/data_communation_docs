{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Notes from 62577 Data Communication Spring 21 course at DTU. Brief summary Layer Data unit Delivery Protocols Diverse Application Message - HTTP ; SMTP ; IMAP ; POP3 ; BiTtorrent ; DNS ; DASH ; DHCP TLD ; NS ; RR ; DORA ; CDN ; OTT Transport Segment Process-to-process TCP ; UDP ; RDP; RDT RTT, GNB Internet Datagram Host-to-host IPv4 ; IPv6 ; Openflow ; RIP ; OSPF ; BGP ; iBGP ; eBGP ; ICMP; SNMP NAT; SDN ; LS ; DV ; AS; ISP; IXP Link Frame Application DASH - Dynamic Adaptive Stream over HTTP DHCP - Dynamic Host Configuration Protocol DNS - Domain Name system HTTP - Hypertext Transfer Protocol IMAP - Internet Message Access Protocol POP3 - Post Office Protocol version 3 SMTP - Simple Mail Transfer Protocol Diverse TLD DNS server - Top-level domain DNS server NS - Name Server RR - resource record DORA - Discover, Offer, Request, Acknowledgment CDN - Content distribution networks OTT - Over the top Transport RDP - Reliable Data Protocol RDT - Reliable Data Transfer Protocol TCP - Transmission Control Protocol UDP - User Datagram Protocol Diverse RTT - round trip time GBN - Go-Back-N Internet ICMP - The Internet Control Message Protocol IPv4 - Internet Protocol version 4 RIP - Routing Information Protocol SNMP - The simple network management protocol OSPF - Open shortest path first BGP - Border Gateway Protocol iBGP - Interior Border Gateway Protocol eBGP - Exterior Border Gateway Protocol ECN - Explicit Congestion Notification Openflow Diverse AS - autonomous system NAT - Networking address translation SDN - Software defined networking LS - Link state routing algorithm DV - The distance-Vector routing algorithm ISP - Internet service provider IXP - Internet exchange point Link","title":"About"},{"location":"#about","text":"Notes from 62577 Data Communication Spring 21 course at DTU.","title":"About"},{"location":"#brief-summary","text":"Layer Data unit Delivery Protocols Diverse Application Message - HTTP ; SMTP ; IMAP ; POP3 ; BiTtorrent ; DNS ; DASH ; DHCP TLD ; NS ; RR ; DORA ; CDN ; OTT Transport Segment Process-to-process TCP ; UDP ; RDP; RDT RTT, GNB Internet Datagram Host-to-host IPv4 ; IPv6 ; Openflow ; RIP ; OSPF ; BGP ; iBGP ; eBGP ; ICMP; SNMP NAT; SDN ; LS ; DV ; AS; ISP; IXP Link Frame","title":"Brief summary"},{"location":"#application","text":"DASH - Dynamic Adaptive Stream over HTTP DHCP - Dynamic Host Configuration Protocol DNS - Domain Name system HTTP - Hypertext Transfer Protocol IMAP - Internet Message Access Protocol POP3 - Post Office Protocol version 3 SMTP - Simple Mail Transfer Protocol","title":"Application"},{"location":"#diverse","text":"TLD DNS server - Top-level domain DNS server NS - Name Server RR - resource record DORA - Discover, Offer, Request, Acknowledgment CDN - Content distribution networks OTT - Over the top","title":"Diverse"},{"location":"#transport","text":"RDP - Reliable Data Protocol RDT - Reliable Data Transfer Protocol TCP - Transmission Control Protocol UDP - User Datagram Protocol","title":"Transport"},{"location":"#diverse_1","text":"RTT - round trip time GBN - Go-Back-N","title":"Diverse"},{"location":"#internet","text":"ICMP - The Internet Control Message Protocol IPv4 - Internet Protocol version 4 RIP - Routing Information Protocol SNMP - The simple network management protocol OSPF - Open shortest path first BGP - Border Gateway Protocol iBGP - Interior Border Gateway Protocol eBGP - Exterior Border Gateway Protocol ECN - Explicit Congestion Notification Openflow","title":"Internet"},{"location":"#diverse_2","text":"AS - autonomous system NAT - Networking address translation SDN - Software defined networking LS - Link state routing algorithm DV - The distance-Vector routing algorithm ISP - Internet service provider IXP - Internet exchange point","title":"Diverse"},{"location":"#link","text":"","title":"Link"},{"location":"application/","text":"Application layer Server Client In a client-server architecture , there is an always-on host, called the server, which services requests from many other hosts, called clients. Page 118 P2P Peer-to-peer ( P2P ) computing or networking is a distributed application architecture that partitions tasks or workloads between peers. P2P . Peers make a portion of their resources, such as processing power, disk storage or network bandwidth, directly available to other network participants, without the need for central coordination by servers or stable hosts.[ 1] Peers are both suppliers and consumers of resources, in contrast to the traditional client-server model in which the consumption and supply of resources is divided. Protocols in different Layer Port A port is a communication endpoint. At the software level a port is a logical construct that identifies a specific process . Port This information is needed because in general a host could be running many network applications. Page 119 Socket A process sends messages into, and receives messages from, the network through a software interface called a socket. A process is analogous to a house and its socket is analogous to its door. Page 119. HTTP The Web's applications protocol, HTTP, defines the format and sequence of messages exchanged between browsers and Web Server. HTTP is only one piece of the Web application. Page 126 Stateless Uses TCP/IP Message types: HTTP request message HTTP response message HTTP/2 Allows objects in a persistent connection to be sent in a client-specified priority order Allows a large object to be broken down into smaller pieces, and the transmission of thsose pieces to be interleaved with transmission other smaller objects, thus preventing a large object from forcing many smaller objects to wait their turn for transmission. Conditional HTTP GET Used to allow a server to only send the requested object to the client if that object has changed since the server last sent this object to the client. An HTTP request message is a so-called conditional GET message if (1) the request message uses the GET method and (2) the request message includes an If-Modified-Since : header line. GET /fruit/kiwi.gif HTTP/1.1 Host: www.exotiquecuisine.com If-modified-since: Wed, 9 Sep 2015 09:23:24 Last modified Last-Modified header is critical for object caching, both in the local client and in network cache servers(also known as proxy servers) Alternative Etag - ETag values are unique identifiers generated by the server and changed every time the object is modified. Persistent vs Non-persistent When this client-server interaction is taking place over TCP, the application developer needs to make an important decision\u2014should each request/response pair be sent over a separate TCP connection, or should all of the requests and their corresponding responses be sent over the same TCP connection? Persistent Non persistent All of the request and their corresponding responses is sent over the same TCP connection Each request/response pair is sent over separate TCP connection Cookies Cookies allows sites to keep track of users. Cookie technology has four components: A cookie header line in the HTTP response message. A cookie header line in the HTTP request message. A cookie file kelp on the user's end system and managed by the user's browser. A back-end database at the Website Page 139 Cache/Proxy Server A Web cache - also called a proxy server - is a network entity that satisfies HTTP requests on the behalf of an origin Web server. The web cache has its own disk storage and keeps copies of recently requested objects in this storage. Web cache can substantially reduce the response time for a client request Web caches can substantially reduce traffic on an institution access link to the Internet. Page 143 What are the 4 aspects of data reliability? A reliable service is one that notifies the user if delivery fails, while an unreliable one does not notify the user if delivery fails All data is sent (no missing or duplicates bytes) The proper order Page 123 What is a server? A host, which services requests from many other hosts, called clients. Page 115 How does caching work? The browser establishes a TCP connection to the Web cache and sends an HTTP request for the object to the Web cache. The web cache checks to see if it has a copy o the object stored locally. If it does, the Web cache returns the object within an HTTP reposnse message to the client browser If the cache does not have the object, the Web cache opens TCP connection to the origin server. The Web cache then sends an HTTP request for the object into the cache-to-server TCP connection. After receiving this request, the origin server sends the object within an HTTP response to the Web cache. When the Web cache receives the object, it stores a copy in its local storage and sends a copy, within an HTTP response message, to the client browser(over the existing TCP connection between the client browser and the Web cache). SMTP SMTP Simple Mail Transfer Protocol ( SMTP ) is the principal application-layer protocol for Internet electronic mail. It uses the reliable data transfer service of TCP to transfer mail from sender's mail server to the recipient's mail server. Page 149 SMTP is a push protocol SMTP vs HTTP Parameter HTTP SMTP Port number 80 25 State Stateless - Type of TCP connection Persistent or Non-persistent Persistent Type of protocol Pull Protocol(mainly) Push Protocol Transfer Files from Web server to Web client Files from one mail server to another mail server IMAP and POP3 A user agent can\u2019t use SMTP to obtain the messages because obtaining the messages is a pull operation, whereas SMTP is a push protocol. The puzzle is completed by introducing a special mail access protocol that transfers messages from a mail server to his local PC. There are currently a number of popular mail access protocols, including Post Office Protocol\u2014Version 3 (POP3), Internet Mail Access Protocol (IMAP), and HTTP. With POP3 access, once a user has downloaded his messages to the local machine, he can create mail folders and move the downloaded messages into the folders. A user can then delete messages, move messages across folders, and search for messages (by sender name or subject). But this paradigm\u2014 namely, folders and messages in the local machine\u2014poses a problem for the nomadic user, who would prefer to maintain a folder hierarchy on a remote server that can be accessed from any computer. This is not possible with POP3\u2014the POP3 protocol does not provide any means for a user to create remote folders and assign messages to folders. So nothing is synchronized. IMAP was designed with the goal of permitting complete management of an email box by multiple email clients, therefore clients generally leave messages on the server until the user explicitly deletes them. All emails and folders are synchronized between multiple devices. Stateless protocol In computing, a stateless protocol is a communications protocol in which no session information is retained by the receiver, usually a server. Stateless protocol CDN Content distributed networks Store/serve multiple copies of videos at multiple geographically distributed sites in order to stream content to hundreds of thousands of simultaneous users Enter deep a CDN approach that stores content in access networks, close to clients Centralized architecture vs distributed architecture Security : CENTRALIZED: If someone has access to the server with the information, any data can be added, modified and deleted. DISTRIBUTED: All data is distributed between the nodes of the network. If something is added, edited or deleted in any computer, it will be reflected in all the computers in the network. If some legal amendments are accepted, new information will be disseminated among other users throughout the network. Otherwise, the data will be copied to match the other nodes. Therefore, the system is self-sufficient and self-regulating. The databases are protected against deliberate attacks or accidental changes of information. Availability : CENTRALIZED: If there are several requests, the server can break down and no longer respond. DISTRIBUTED: Can withstand significant pressure on the network. All the nodes in the network have the data. Then, the requests are distributed among the nodes. Therefore, the pressure does not fall on a computer, but on the entire network. In this case, the total availability of the network is much greater than in the centralized one. Accessibility : CENTRALIZED: If the central storage has problems, you will not be able to obtain your information unless the problems are solved. In addition, different users have different needs, but the processes are standardized and can be inconvenient for customers. DISTRIBUTED: Given that the number of computers in the distributed network is large, DDoS attacks are possible only in case their capacity is much greater than that of the network. But that would be a very expensive attack. In a centralized model, the response time is very similar in this case. Therefore, it can be considered that distributed networks are secure. Data transfer rates: CENTRALIZED: If the nodes are located in different countries or continents, the connection with the server can become a problem. DISTRIBUTED: In distributed networks, the client can choose the node and work with all the required information. Scalability: CENTRALIZED: Centralized networks are difficult to scale because the capacity of the server is limited and the traffic can not be infinite. In a centralized model, all clients are connected to the server. Only the server stores all the data. Therefore, all requests to receive, change, add or delete data go through the main computer. But server resources are finite. As a result, he is able to carry out his work effectively only for the specific number of participants. If the number of clients is greater, the server load may exceed the limit during the peak time. DISTRIBUTED: Distributed models do not have this problem since the load is shared among several computers. Centralized vs distributed Bit torrent BitTorrent (abbreviated to BT ) is a communication protocol for peer-to-peer file sharing (P2P), which enables users to distribute data and electronic files over the Internet in a decentralized manner. BitTorrent is a tit-for-tat protocol, meaning that you have to give in order to receive. Bit torrent Typically, BitTorrent uses TCP as its transport protocol. The well known TCP port for BitTorrent traffic is 6881-6889 (and 6969 for the tracker port). The DHT extension (peer2peer tracker) uses various UDP ports negotiated by the peers. TCP Bittorrent Churn Churn refers to a large number of arriving and departing participants within a short time in peer-to-peer (P2P) networks. Churn Rarest first The rarest first algorithm refers to the normal operation of the piece selection policy used in BitTorrent. It is also called the local rarest first algorithm. Each peer has a rarest pieces set. The rarest pieces are the pieces that have the least number of copies in the peer set. In general, right after being unchoked, the local peer randomly requests the next piece to download in its rarest pieces set. Rarest first Optimistically unchoked Each peer in a peer\u2019s neighbour list has two state bits: interested/uninterested: this bit tells us whether the neighbour is interested in the pieces we have got. choked/unchoked: this bit states whether we are currently choking the neighbour. Choking a peer means disallowing it to download pieces at this point in time. Peers send choke, unchoke, interested, and not interested messages to each other in the peer protocol. Choking works on a tit-for-tat basis: If we are currently downloading from a peer, we will unchoke that peer so that it may also download from us. This means, that when selecting a peer to download from, we should prefer peers that are interested in us. If a peer does not contribute (i.e., we are not able to download from it) we can choke it again. Optimistic unchoke : It is a strategy to choose peers to cooperate with. One or more peers will be optimistically unchoked at all time. This role rotates every 30 seconds. If an optimistically unchoked peer start contributing, it may stay unchoked. Replacing contributing peers, if an optimistic unchoke results in a peer that is performing better (yielding faster download rates), one of the currently unchoked peers will be replaced. Choked/unchoked state of neighbours is reconsidered every 10 seconds. At any point in time a peer should have a number of unchoked neighbours. Some implementations have a static value of 4, whereas others use the square root of the upload capacity in KB/s Optimistically unchoked Leech Leech has two meanings. Often, leecher is synonymous with downloader (see above): simply describing a peer or any client that does not have 100% of the data. The term leech also refers to a peer (or peers) that has a negative effect on the swarm by having a very poor share ratio, downloading much more than they upload. Leeches may be on asymmetric Internet connections or do not leave their BitTorrent client open to seed the file after their download has completed. However, some leeches intentionally avoid uploading by using modified clients or excessively limiting their upload speed. Leech Bittorrent glossary Seed / Seeding A seed refers to a machine possessing all of the data (100 % completion). A peer or downloader becomes a seed when it completely downloads all the data and continues/starts uploading data for other peers to download from. This includes any peer possessing 100% of the data or a web seed. When a downloader starts uploading content, the peer becomes a seed DNS The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. DNS services: hostname-to.IP-address translation host aliasing (canonical, alias names) mail server aliasing load distribution (replicated Web servers: many IP address correspond to one name) DNS DNS records Distributed database storing resource records(RR) in format: (name, value, type, ttl) Type Name Value A Hostname Ip address NS domain (foo.com) hostname of authoritative NS for this domain CNAME alias name for some \"canonical\" (the real) name canonical name MX name of SMTP mail server associated with name Difference between iterative and recursive calling Iterative Iterative DNS queries are ones in which a DNS server is queried and returns an answer without querying other DNS servers, even if it cannot provide a definitive answer. Iterative queries are also called non-recursive queries. Recursive Recursive DNS queries occur when a DNS client requests information from a DNS server that is set to query subsequent DNS servers until a definitive answer is returned to the client. The queries made to subsequent DNS servers from the first DNS server are iterative queries. Scenarios where recursive calling is relevant Recursive DNS queries generally tend to resolve faster than iterative queries. This is due to caching. A recursive DNS server caches the final answer to every query it performs and saves that final answer for a certain amount of time (known as the Time-To-Live). Why hierarchical database? In order to deal with the issue of scale. Page 164 Local DNS server - replies to DNS query by local host, by contacting other DNS servers to answer the query Root servers - highest level of DNS hierarchy, know how to reach servers responsible for a given domain(e.g. .com, .edu) TLD servers (Top-level domain) -responsible for a domain (e.g., .com, .edu); knows how to contact authoritative name servers Authoritative DNS servers - provide authoritative hostname to IP mappings for organization's named hosts What is a DNS caching? DNS cache refers to the temporary storage of information about previous DNS lookups Compare P2P with server Client architecture Peer-to-peer networks connect computers so that each computer shares all or part of its resources. Client-server networks have one or more central computers, or servers, that hold the data and manage resources. How does DASH work? HTTP-based streaming, often referred to as Dynamic Adaptive Streaming over HTTP (DASH). In DASH, the video is encoded into several different versions, with each version having a different bit rate and, correspondingly, a different quality level. The client dynamically requests chunks of video segments of a few seconds in length. When the amount of available bandwidth is high, the client naturally selects chunks from a high-rate version; and when the available bandwidth is low, it naturally selects from a low-rate version. The client selects different chunks one at a time with HTTP GET request messages. With DASH, each video version is stored in the HTTP server, each with a different URL. The HTTP server also has a manifest file, which provides a URL for each version along with its bit rate. The client first requests the manifest file and learns about the various versions. The client then selects one chunk at a time by specifying a URL and a byte range in an HTTP GET request message for each chunk. While downloading chunks, the client also measures the received bandwidth and runs a rate determination algorithm to select the chunk to request next. Naturally, if the client has a lot of video buffered and if the measured receive bandwidth is high, it will choose a chunk from a high-bitrate version. And naturally if the client has little video buffered and the measured received bandwidth is low, it will choose a chunk from a low-bitrate version. DASH therefore allows the client to freely switch among different quality levels.","title":"Application layer"},{"location":"application/#application-layer","text":"","title":"Application layer"},{"location":"application/#server-client","text":"In a client-server architecture , there is an always-on host, called the server, which services requests from many other hosts, called clients. Page 118","title":"Server Client"},{"location":"application/#p2p","text":"Peer-to-peer ( P2P ) computing or networking is a distributed application architecture that partitions tasks or workloads between peers. P2P . Peers make a portion of their resources, such as processing power, disk storage or network bandwidth, directly available to other network participants, without the need for central coordination by servers or stable hosts.[ 1] Peers are both suppliers and consumers of resources, in contrast to the traditional client-server model in which the consumption and supply of resources is divided.","title":"P2P"},{"location":"application/#protocols-in-different-layer","text":"","title":"Protocols in different Layer"},{"location":"application/#port","text":"A port is a communication endpoint. At the software level a port is a logical construct that identifies a specific process . Port This information is needed because in general a host could be running many network applications. Page 119","title":"Port"},{"location":"application/#socket","text":"A process sends messages into, and receives messages from, the network through a software interface called a socket. A process is analogous to a house and its socket is analogous to its door. Page 119.","title":"Socket"},{"location":"application/#http","text":"The Web's applications protocol, HTTP, defines the format and sequence of messages exchanged between browsers and Web Server. HTTP is only one piece of the Web application. Page 126 Stateless Uses TCP/IP Message types: HTTP request message HTTP response message HTTP/2 Allows objects in a persistent connection to be sent in a client-specified priority order Allows a large object to be broken down into smaller pieces, and the transmission of thsose pieces to be interleaved with transmission other smaller objects, thus preventing a large object from forcing many smaller objects to wait their turn for transmission.","title":"HTTP"},{"location":"application/#conditional-http-get","text":"Used to allow a server to only send the requested object to the client if that object has changed since the server last sent this object to the client. An HTTP request message is a so-called conditional GET message if (1) the request message uses the GET method and (2) the request message includes an If-Modified-Since : header line. GET /fruit/kiwi.gif HTTP/1.1 Host: www.exotiquecuisine.com If-modified-since: Wed, 9 Sep 2015 09:23:24","title":"Conditional HTTP GET"},{"location":"application/#last-modified","text":"Last-Modified header is critical for object caching, both in the local client and in network cache servers(also known as proxy servers) Alternative Etag - ETag values are unique identifiers generated by the server and changed every time the object is modified.","title":"Last modified"},{"location":"application/#persistent-vs-non-persistent","text":"When this client-server interaction is taking place over TCP, the application developer needs to make an important decision\u2014should each request/response pair be sent over a separate TCP connection, or should all of the requests and their corresponding responses be sent over the same TCP connection? Persistent Non persistent All of the request and their corresponding responses is sent over the same TCP connection Each request/response pair is sent over separate TCP connection","title":"Persistent vs Non-persistent"},{"location":"application/#cookies","text":"Cookies allows sites to keep track of users. Cookie technology has four components: A cookie header line in the HTTP response message. A cookie header line in the HTTP request message. A cookie file kelp on the user's end system and managed by the user's browser. A back-end database at the Website Page 139","title":"Cookies"},{"location":"application/#cacheproxy-server","text":"A Web cache - also called a proxy server - is a network entity that satisfies HTTP requests on the behalf of an origin Web server. The web cache has its own disk storage and keeps copies of recently requested objects in this storage. Web cache can substantially reduce the response time for a client request Web caches can substantially reduce traffic on an institution access link to the Internet. Page 143","title":"Cache/Proxy Server"},{"location":"application/#what-are-the-4-aspects-of-data-reliability","text":"A reliable service is one that notifies the user if delivery fails, while an unreliable one does not notify the user if delivery fails All data is sent (no missing or duplicates bytes) The proper order Page 123","title":"What are the 4 aspects of data reliability?"},{"location":"application/#what-is-a-server","text":"A host, which services requests from many other hosts, called clients. Page 115","title":"What is a server?"},{"location":"application/#how-does-caching-work","text":"The browser establishes a TCP connection to the Web cache and sends an HTTP request for the object to the Web cache. The web cache checks to see if it has a copy o the object stored locally. If it does, the Web cache returns the object within an HTTP reposnse message to the client browser If the cache does not have the object, the Web cache opens TCP connection to the origin server. The Web cache then sends an HTTP request for the object into the cache-to-server TCP connection. After receiving this request, the origin server sends the object within an HTTP response to the Web cache. When the Web cache receives the object, it stores a copy in its local storage and sends a copy, within an HTTP response message, to the client browser(over the existing TCP connection between the client browser and the Web cache).","title":"How does caching work?"},{"location":"application/#smtp","text":"SMTP Simple Mail Transfer Protocol ( SMTP ) is the principal application-layer protocol for Internet electronic mail. It uses the reliable data transfer service of TCP to transfer mail from sender's mail server to the recipient's mail server. Page 149 SMTP is a push protocol","title":"SMTP"},{"location":"application/#smtp-vs-http","text":"Parameter HTTP SMTP Port number 80 25 State Stateless - Type of TCP connection Persistent or Non-persistent Persistent Type of protocol Pull Protocol(mainly) Push Protocol Transfer Files from Web server to Web client Files from one mail server to another mail server","title":"SMTP vs HTTP"},{"location":"application/#imap-and-pop3","text":"A user agent can\u2019t use SMTP to obtain the messages because obtaining the messages is a pull operation, whereas SMTP is a push protocol. The puzzle is completed by introducing a special mail access protocol that transfers messages from a mail server to his local PC. There are currently a number of popular mail access protocols, including Post Office Protocol\u2014Version 3 (POP3), Internet Mail Access Protocol (IMAP), and HTTP. With POP3 access, once a user has downloaded his messages to the local machine, he can create mail folders and move the downloaded messages into the folders. A user can then delete messages, move messages across folders, and search for messages (by sender name or subject). But this paradigm\u2014 namely, folders and messages in the local machine\u2014poses a problem for the nomadic user, who would prefer to maintain a folder hierarchy on a remote server that can be accessed from any computer. This is not possible with POP3\u2014the POP3 protocol does not provide any means for a user to create remote folders and assign messages to folders. So nothing is synchronized. IMAP was designed with the goal of permitting complete management of an email box by multiple email clients, therefore clients generally leave messages on the server until the user explicitly deletes them. All emails and folders are synchronized between multiple devices.","title":"IMAP and POP3"},{"location":"application/#stateless-protocol","text":"In computing, a stateless protocol is a communications protocol in which no session information is retained by the receiver, usually a server. Stateless protocol","title":"Stateless protocol"},{"location":"application/#cdn","text":"Content distributed networks Store/serve multiple copies of videos at multiple geographically distributed sites in order to stream content to hundreds of thousands of simultaneous users","title":"CDN"},{"location":"application/#enter-deep","text":"a CDN approach that stores content in access networks, close to clients","title":"Enter deep"},{"location":"application/#centralized-architecture-vs-distributed-architecture","text":"Security : CENTRALIZED: If someone has access to the server with the information, any data can be added, modified and deleted. DISTRIBUTED: All data is distributed between the nodes of the network. If something is added, edited or deleted in any computer, it will be reflected in all the computers in the network. If some legal amendments are accepted, new information will be disseminated among other users throughout the network. Otherwise, the data will be copied to match the other nodes. Therefore, the system is self-sufficient and self-regulating. The databases are protected against deliberate attacks or accidental changes of information. Availability : CENTRALIZED: If there are several requests, the server can break down and no longer respond. DISTRIBUTED: Can withstand significant pressure on the network. All the nodes in the network have the data. Then, the requests are distributed among the nodes. Therefore, the pressure does not fall on a computer, but on the entire network. In this case, the total availability of the network is much greater than in the centralized one. Accessibility : CENTRALIZED: If the central storage has problems, you will not be able to obtain your information unless the problems are solved. In addition, different users have different needs, but the processes are standardized and can be inconvenient for customers. DISTRIBUTED: Given that the number of computers in the distributed network is large, DDoS attacks are possible only in case their capacity is much greater than that of the network. But that would be a very expensive attack. In a centralized model, the response time is very similar in this case. Therefore, it can be considered that distributed networks are secure. Data transfer rates: CENTRALIZED: If the nodes are located in different countries or continents, the connection with the server can become a problem. DISTRIBUTED: In distributed networks, the client can choose the node and work with all the required information. Scalability: CENTRALIZED: Centralized networks are difficult to scale because the capacity of the server is limited and the traffic can not be infinite. In a centralized model, all clients are connected to the server. Only the server stores all the data. Therefore, all requests to receive, change, add or delete data go through the main computer. But server resources are finite. As a result, he is able to carry out his work effectively only for the specific number of participants. If the number of clients is greater, the server load may exceed the limit during the peak time. DISTRIBUTED: Distributed models do not have this problem since the load is shared among several computers. Centralized vs distributed","title":"Centralized architecture vs distributed architecture"},{"location":"application/#bit-torrent","text":"BitTorrent (abbreviated to BT ) is a communication protocol for peer-to-peer file sharing (P2P), which enables users to distribute data and electronic files over the Internet in a decentralized manner. BitTorrent is a tit-for-tat protocol, meaning that you have to give in order to receive. Bit torrent Typically, BitTorrent uses TCP as its transport protocol. The well known TCP port for BitTorrent traffic is 6881-6889 (and 6969 for the tracker port). The DHT extension (peer2peer tracker) uses various UDP ports negotiated by the peers. TCP Bittorrent","title":"Bit torrent"},{"location":"application/#churn","text":"Churn refers to a large number of arriving and departing participants within a short time in peer-to-peer (P2P) networks. Churn","title":"Churn"},{"location":"application/#rarest-first","text":"The rarest first algorithm refers to the normal operation of the piece selection policy used in BitTorrent. It is also called the local rarest first algorithm. Each peer has a rarest pieces set. The rarest pieces are the pieces that have the least number of copies in the peer set. In general, right after being unchoked, the local peer randomly requests the next piece to download in its rarest pieces set. Rarest first","title":"Rarest first"},{"location":"application/#optimistically-unchoked","text":"Each peer in a peer\u2019s neighbour list has two state bits: interested/uninterested: this bit tells us whether the neighbour is interested in the pieces we have got. choked/unchoked: this bit states whether we are currently choking the neighbour. Choking a peer means disallowing it to download pieces at this point in time. Peers send choke, unchoke, interested, and not interested messages to each other in the peer protocol. Choking works on a tit-for-tat basis: If we are currently downloading from a peer, we will unchoke that peer so that it may also download from us. This means, that when selecting a peer to download from, we should prefer peers that are interested in us. If a peer does not contribute (i.e., we are not able to download from it) we can choke it again. Optimistic unchoke : It is a strategy to choose peers to cooperate with. One or more peers will be optimistically unchoked at all time. This role rotates every 30 seconds. If an optimistically unchoked peer start contributing, it may stay unchoked. Replacing contributing peers, if an optimistic unchoke results in a peer that is performing better (yielding faster download rates), one of the currently unchoked peers will be replaced. Choked/unchoked state of neighbours is reconsidered every 10 seconds. At any point in time a peer should have a number of unchoked neighbours. Some implementations have a static value of 4, whereas others use the square root of the upload capacity in KB/s Optimistically unchoked","title":"Optimistically unchoked"},{"location":"application/#leech","text":"Leech has two meanings. Often, leecher is synonymous with downloader (see above): simply describing a peer or any client that does not have 100% of the data. The term leech also refers to a peer (or peers) that has a negative effect on the swarm by having a very poor share ratio, downloading much more than they upload. Leeches may be on asymmetric Internet connections or do not leave their BitTorrent client open to seed the file after their download has completed. However, some leeches intentionally avoid uploading by using modified clients or excessively limiting their upload speed. Leech Bittorrent glossary","title":"Leech"},{"location":"application/#seed-seeding","text":"A seed refers to a machine possessing all of the data (100 % completion). A peer or downloader becomes a seed when it completely downloads all the data and continues/starts uploading data for other peers to download from. This includes any peer possessing 100% of the data or a web seed. When a downloader starts uploading content, the peer becomes a seed","title":"Seed / Seeding"},{"location":"application/#dns","text":"The Domain Name System (DNS) is the phonebook of the Internet. Humans access information online through domain names, like nytimes.com or espn.com. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. DNS services: hostname-to.IP-address translation host aliasing (canonical, alias names) mail server aliasing load distribution (replicated Web servers: many IP address correspond to one name) DNS","title":"DNS"},{"location":"application/#dns-records","text":"Distributed database storing resource records(RR) in format: (name, value, type, ttl) Type Name Value A Hostname Ip address NS domain (foo.com) hostname of authoritative NS for this domain CNAME alias name for some \"canonical\" (the real) name canonical name MX name of SMTP mail server associated with name","title":"DNS records"},{"location":"application/#difference-between-iterative-and-recursive-calling","text":"Iterative Iterative DNS queries are ones in which a DNS server is queried and returns an answer without querying other DNS servers, even if it cannot provide a definitive answer. Iterative queries are also called non-recursive queries. Recursive Recursive DNS queries occur when a DNS client requests information from a DNS server that is set to query subsequent DNS servers until a definitive answer is returned to the client. The queries made to subsequent DNS servers from the first DNS server are iterative queries.","title":"Difference between iterative and recursive calling"},{"location":"application/#scenarios-where-recursive-calling-is-relevant","text":"Recursive DNS queries generally tend to resolve faster than iterative queries. This is due to caching. A recursive DNS server caches the final answer to every query it performs and saves that final answer for a certain amount of time (known as the Time-To-Live).","title":"Scenarios where recursive calling is  relevant"},{"location":"application/#why-hierarchical-database","text":"In order to deal with the issue of scale. Page 164 Local DNS server - replies to DNS query by local host, by contacting other DNS servers to answer the query Root servers - highest level of DNS hierarchy, know how to reach servers responsible for a given domain(e.g. .com, .edu) TLD servers (Top-level domain) -responsible for a domain (e.g., .com, .edu); knows how to contact authoritative name servers Authoritative DNS servers - provide authoritative hostname to IP mappings for organization's named hosts","title":"Why hierarchical database?"},{"location":"application/#what-is-a-dns-caching","text":"DNS cache refers to the temporary storage of information about previous DNS lookups","title":"What is a DNS caching?"},{"location":"application/#compare-p2p-with-server-client-architecture","text":"Peer-to-peer networks connect computers so that each computer shares all or part of its resources. Client-server networks have one or more central computers, or servers, that hold the data and manage resources.","title":"Compare P2P with server Client architecture"},{"location":"application/#how-does-dash-work","text":"HTTP-based streaming, often referred to as Dynamic Adaptive Streaming over HTTP (DASH). In DASH, the video is encoded into several different versions, with each version having a different bit rate and, correspondingly, a different quality level. The client dynamically requests chunks of video segments of a few seconds in length. When the amount of available bandwidth is high, the client naturally selects chunks from a high-rate version; and when the available bandwidth is low, it naturally selects from a low-rate version. The client selects different chunks one at a time with HTTP GET request messages. With DASH, each video version is stored in the HTTP server, each with a different URL. The HTTP server also has a manifest file, which provides a URL for each version along with its bit rate. The client first requests the manifest file and learns about the various versions. The client then selects one chunk at a time by specifying a URL and a byte range in an HTTP GET request message for each chunk. While downloading chunks, the client also measures the received bandwidth and runs a rate determination algorithm to select the chunk to request next. Naturally, if the client has a lot of video buffered and if the measured receive bandwidth is high, it will choose a chunk from a high-bitrate version. And naturally if the client has little video buffered and the measured received bandwidth is low, it will choose a chunk from a low-bitrate version. DASH therefore allows the client to freely switch among different quality levels.","title":"How does DASH work?"},{"location":"calculations/","text":"Calculations Transmission delay Time to transmit packet into channel D_{trans} = \\frac{L}{R} D_{trans} = \\frac{L}{R} L L is length of the packet in bits R R is transmission rate of the link in bits/sec Example: 1 Gbps link, 8000 bit packet D_{trans} = \\frac{8000bit}{10^9bit/sec}= 8microsecs D_{trans} = \\frac{8000bit}{10^9bit/sec}= 8microsecs RTT RTT = 2*D_{prop} RTT = 2*D_{prop} Utilization - fraction of time sender busy sending In relation to the performance of RTT U_{sender}=\\frac{D_{trans}}{RTT+D_{Trans}} U_{sender}=\\frac{D_{trans}}{RTT+D_{Trans}} Example: D_{trans}=8mircosecs \\\\ RTT = 30 ms \\\\ U_{sender} = \\frac{0.008}{30+0.008} = 0.00027 D_{trans}=8mircosecs \\\\ RTT = 30 ms \\\\ U_{sender} = \\frac{0.008}{30+0.008} = 0.00027","title":"Calculations"},{"location":"calculations/#calculations","text":"","title":"Calculations"},{"location":"calculations/#transmission-delay","text":"Time to transmit packet into channel D_{trans} = \\frac{L}{R} D_{trans} = \\frac{L}{R} L L is length of the packet in bits R R is transmission rate of the link in bits/sec Example: 1 Gbps link, 8000 bit packet D_{trans} = \\frac{8000bit}{10^9bit/sec}= 8microsecs D_{trans} = \\frac{8000bit}{10^9bit/sec}= 8microsecs","title":"Transmission delay"},{"location":"calculations/#rtt","text":"RTT = 2*D_{prop} RTT = 2*D_{prop}","title":"RTT"},{"location":"calculations/#utilization-fraction-of-time-sender-busy-sending","text":"In relation to the performance of RTT U_{sender}=\\frac{D_{trans}}{RTT+D_{Trans}} U_{sender}=\\frac{D_{trans}}{RTT+D_{Trans}} Example: D_{trans}=8mircosecs \\\\ RTT = 30 ms \\\\ U_{sender} = \\frac{0.008}{30+0.008} = 0.00027 D_{trans}=8mircosecs \\\\ RTT = 30 ms \\\\ U_{sender} = \\frac{0.008}{30+0.008} = 0.00027","title":"Utilization - fraction of time sender busy sending"},{"location":"glossary/","text":"","title":"Glossary"},{"location":"introduction/","text":"Introduction Internet Network of networks. A worldwide interconnection of individual networks. Internet Host End systems e.g. desktop computers, servers, mobile devices etc. Host sometimes divided into two categories: clients and servers. Page 38 Server Servers tend to be more powerful machines that store and distribute Web pages, stream video, relay e-mail, and so on. Page 38 Router A router is a networking device that forwards data packets between computer networks. Router Switch A network switch is network hardware that connect devices on computer network by using packet switching to receive and forward data to the destination device. Swtich Modem A modem is a hardware device that converts data from a digital format into suitable for a transmission medium such as telephone lines or radio. Modem Protocol A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or the event. Page 35 Network Core (network backbone) The mesh of packet switches and links that interconnects the Internet's end systems. FDM Frequency-division multiplexing. The frequency spectrum of a link is divided up among the connections established across the link. Page 55 TDM Time-division multiplexing. Time is divided into frames of fixed duration, each frame is divided into fixed number of time slots. When the network establishes a connection across a link, the network dedicates one time slot in every frame to connection ISP End systems access the Internet through Internet Service Providers. Page 30 node delay As packet travels from one node(host or router) to the subsequent node(host or router) along this path, the packet suffers from several types of delays at each node along the path. The most important of these delays are the nodal processing delay, queuing delay, transmission delay and propagation delay . TCP/IP protocol stack It is conceptual model and set of communications protocols used in the Internet. TCP/IP TCP/IP protocol stack Denial-of-service (DoS) Denial-of-service attack (DoS attack) is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet. Denial of service is typically accomplished by flooding the targeted machine or resource with superfluous requests in an attempt to overload systems and prevent some or all legitimate requests from being fulfilled. DoS DDoS Distributed denial-of-service attack, the incoming traffic flooding the victim originates from many different sources. DDoS Packet sniffing Packet sniffing is the practice of gathering, collecting, and logging some or all packets that pass through a computer network, regardless of how the packet is addressed. In this way, every packet, or a defined subset of packets, may be gathered for further analysis. Packet sniffing Man-in-the-middle attack Cyberattack where the attacker secretly relays and possibly alters the communications between two parties who believe that they are directly communicating with each other. MITM Circuit switching The switches on the path between the sender and receiver maintain connection state for that connection. In the jargon of telephony, this connection is called a circuit. End-to-end routing The end-to-end routing process is analogous to a car driver who does not use maps but instead prefers to ask for directions. Page 53 Link The term link is widely used in computer networking to refer to the communications facilities that connect nodes of a network. Link Multiplexing Multiplexing is a technique used to combine and send the multiple data streams over a single medium. Mutiplexing Throughput vs Bandwidth vs Latency Throughput rate (bit/time unit) at which bits are being send from sender to receiver instantaneous: rate at given point in time(Many applications, including many P2P file sharing \u00ad systems, display the instantaneous throughput during downloads in the user interface) average: rate over longer period of time Throughput is always less than or equal to bandwidth but can never exceed bandwidth. In a computer network, the throughput can be affected by many factors as listed below: Network congestion due to heavy network usage. Too many users are accessing the same server. Low bandwidth allocation between network devices. Medium loss of a computer network. Resources (CPU, RAM) of network devices. So even if you have a high bandwidth to your ISP, it may not guarantee that you will have a high throughput due to the above factors. Bandwidth In computer network, bandwidth is defined as the maximum number of bits that can flow through a network connection in a given period of time. The fundamental unit of network bandwidth is bits per second (bps). An ISP network connection that specified a bandwidth of 1Mbps means that in one second, maximum 100000 bits can be transferred across this connection. The term bandwidth is normally used in internet broadband subscription plan. Normally a higher bandwidth subscription plan will cost more than that of a lower bandwidth subscription plan. Bandwidth Latency Latency measures delay . Delay is simply the time taken for a data packet to reach its destination after being sent. We measure network latency as round trips, although it may sometimes be measured in one-way trips. However, round-trip measurements are more common, because devices usually wait for an acknowledgment from the destination machine to be returned before transmitting the complete set of data. This acknowledgment verifies the connection to the destination device. If your network is experiencing high levels of latency, this signals poor or slow network performance. In short, the higher your network delay and latency, the longer it will take for a data packet to reach the appropriate destination. The result of latency is often choppy and lagging services. This might manifest as poor-quality VoIP calls, where elements of speech are missing or there is a noticeable lag. Latency Delay in a network node Which parts are included in the calculation of the delay in a network node? - Processing delay - Queuing delay - Transmission delay - Propagation delay TCP/IP procotoal stack Which layers exist in the TCP/IP protocol stack? TCP IP stack Security What can threaten security in a system? Viruses Worms Denial-of-service(DoS) attacks Vulnerability attacks Bandwidth flooding Connection flooding Sniff Packets","title":"Introduction"},{"location":"introduction/#introduction","text":"","title":"Introduction"},{"location":"introduction/#internet","text":"Network of networks. A worldwide interconnection of individual networks. Internet","title":"Internet"},{"location":"introduction/#host","text":"End systems e.g. desktop computers, servers, mobile devices etc. Host sometimes divided into two categories: clients and servers. Page 38","title":"Host"},{"location":"introduction/#server","text":"Servers tend to be more powerful machines that store and distribute Web pages, stream video, relay e-mail, and so on. Page 38","title":"Server"},{"location":"introduction/#router","text":"A router is a networking device that forwards data packets between computer networks. Router","title":"Router"},{"location":"introduction/#switch","text":"A network switch is network hardware that connect devices on computer network by using packet switching to receive and forward data to the destination device. Swtich","title":"Switch"},{"location":"introduction/#modem","text":"A modem is a hardware device that converts data from a digital format into suitable for a transmission medium such as telephone lines or radio. Modem","title":"Modem"},{"location":"introduction/#protocol","text":"A protocol defines the format and the order of messages exchanged between two or more communicating entities, as well as the actions taken on the transmission and/or receipt of a message or the event. Page 35","title":"Protocol"},{"location":"introduction/#network-core-network-backbone","text":"The mesh of packet switches and links that interconnects the Internet's end systems.","title":"Network Core (network backbone)"},{"location":"introduction/#fdm","text":"Frequency-division multiplexing. The frequency spectrum of a link is divided up among the connections established across the link. Page 55","title":"FDM"},{"location":"introduction/#tdm","text":"Time-division multiplexing. Time is divided into frames of fixed duration, each frame is divided into fixed number of time slots. When the network establishes a connection across a link, the network dedicates one time slot in every frame to connection","title":"TDM"},{"location":"introduction/#isp","text":"End systems access the Internet through Internet Service Providers. Page 30","title":"ISP"},{"location":"introduction/#node-delay","text":"As packet travels from one node(host or router) to the subsequent node(host or router) along this path, the packet suffers from several types of delays at each node along the path. The most important of these delays are the nodal processing delay, queuing delay, transmission delay and propagation delay .","title":"node delay"},{"location":"introduction/#tcpip-protocol-stack","text":"It is conceptual model and set of communications protocols used in the Internet. TCP/IP TCP/IP protocol stack","title":"TCP/IP protocol stack"},{"location":"introduction/#denial-of-service-dos","text":"Denial-of-service attack (DoS attack) is a cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet. Denial of service is typically accomplished by flooding the targeted machine or resource with superfluous requests in an attempt to overload systems and prevent some or all legitimate requests from being fulfilled. DoS","title":"Denial-of-service (DoS)"},{"location":"introduction/#ddos","text":"Distributed denial-of-service attack, the incoming traffic flooding the victim originates from many different sources. DDoS","title":"DDoS"},{"location":"introduction/#packet-sniffing","text":"Packet sniffing is the practice of gathering, collecting, and logging some or all packets that pass through a computer network, regardless of how the packet is addressed. In this way, every packet, or a defined subset of packets, may be gathered for further analysis. Packet sniffing","title":"Packet sniffing"},{"location":"introduction/#man-in-the-middle-attack","text":"Cyberattack where the attacker secretly relays and possibly alters the communications between two parties who believe that they are directly communicating with each other. MITM","title":"Man-in-the-middle attack"},{"location":"introduction/#circuit-switching","text":"The switches on the path between the sender and receiver maintain connection state for that connection. In the jargon of telephony, this connection is called a circuit.","title":"Circuit switching"},{"location":"introduction/#end-to-end-routing","text":"The end-to-end routing process is analogous to a car driver who does not use maps but instead prefers to ask for directions. Page 53","title":"End-to-end routing"},{"location":"introduction/#link","text":"The term link is widely used in computer networking to refer to the communications facilities that connect nodes of a network. Link","title":"Link"},{"location":"introduction/#multiplexing","text":"Multiplexing is a technique used to combine and send the multiple data streams over a single medium. Mutiplexing","title":"Multiplexing"},{"location":"introduction/#throughput-vs-bandwidth-vs-latency","text":"","title":"Throughput vs Bandwidth vs Latency"},{"location":"introduction/#throughput","text":"rate (bit/time unit) at which bits are being send from sender to receiver instantaneous: rate at given point in time(Many applications, including many P2P file sharing \u00ad systems, display the instantaneous throughput during downloads in the user interface) average: rate over longer period of time Throughput is always less than or equal to bandwidth but can never exceed bandwidth. In a computer network, the throughput can be affected by many factors as listed below: Network congestion due to heavy network usage. Too many users are accessing the same server. Low bandwidth allocation between network devices. Medium loss of a computer network. Resources (CPU, RAM) of network devices. So even if you have a high bandwidth to your ISP, it may not guarantee that you will have a high throughput due to the above factors.","title":"Throughput"},{"location":"introduction/#bandwidth","text":"In computer network, bandwidth is defined as the maximum number of bits that can flow through a network connection in a given period of time. The fundamental unit of network bandwidth is bits per second (bps). An ISP network connection that specified a bandwidth of 1Mbps means that in one second, maximum 100000 bits can be transferred across this connection. The term bandwidth is normally used in internet broadband subscription plan. Normally a higher bandwidth subscription plan will cost more than that of a lower bandwidth subscription plan. Bandwidth","title":"Bandwidth"},{"location":"introduction/#latency","text":"Latency measures delay . Delay is simply the time taken for a data packet to reach its destination after being sent. We measure network latency as round trips, although it may sometimes be measured in one-way trips. However, round-trip measurements are more common, because devices usually wait for an acknowledgment from the destination machine to be returned before transmitting the complete set of data. This acknowledgment verifies the connection to the destination device. If your network is experiencing high levels of latency, this signals poor or slow network performance. In short, the higher your network delay and latency, the longer it will take for a data packet to reach the appropriate destination. The result of latency is often choppy and lagging services. This might manifest as poor-quality VoIP calls, where elements of speech are missing or there is a noticeable lag. Latency","title":"Latency"},{"location":"introduction/#delay-in-a-network-node","text":"Which parts are included in the calculation of the delay in a network node? - Processing delay - Queuing delay - Transmission delay - Propagation delay","title":"Delay in a network node"},{"location":"introduction/#tcpip-procotoal-stack","text":"Which layers exist in the TCP/IP protocol stack? TCP IP stack","title":"TCP/IP procotoal stack"},{"location":"introduction/#security","text":"What can threaten security in a system? Viruses Worms Denial-of-service(DoS) attacks Vulnerability attacks Bandwidth flooding Connection flooding Sniff Packets","title":"Security"},{"location":"ip_suite/","text":"Internet protocol suite Layer Data unit Delivery Protocols Diverse Application Message - HTTP ; SMTP ; IMAP ; POP3 ; BiTtorrent ; DNS ; DASH ; DHCP TLD ; NS ; RR ; DORA ; CDN ; OTT Transport Segment Process-to-process TCP ; UDP ; RDP; RDT RTT, GNB Internet Datagram Host-to-host IPv4 ; IPv6 ; Openflow ; RIP ; OSPF ; BGP ; iBGP ; eBGP ; ICMP; SNMP NAT; SDN ; LS ; DV ; AS; ISP; IXP Link Frame Application DASH - Dynamic Adaptive Stream over HTTP DHCP - Dynamic Host Configuration Protocol DNS - Domain Name system HTTP - Hypertext Transfer Protocol IMAP - Internet Message Access Protocol POP3 - Post Office Protocol version 3 SMTP - Simple Mail Transfer Protocol Diverse TLD DNS server - Top-level domain DNS server NS - Name Server RR - resource record DORA - Discover, Offer, Request, Acknowledgment CDN - Content distribution networks OTT - Over the top Transport RDP - Reliable Data Protocol RDT - Reliable Data Transfer Protocol TCP - Transmission Control Protocol UDP - User Datagram Protocol Diverse RTT - round trip time GBN - Go-Back-N Internet ICMP - The Internet Control Message Protocol IPv4 - Internet Protocol version 4 RIP - Routing Information Protocol SNMP - The simple network management protocol OSPF - Open shortest path first BGP - Border Gateway Protocol iBGP - Interior Border Gateway Protocol eBGP - Exterior Border Gateway Protocol ECN - Explicit Congestion Notification Openflow Diverse AS - autonomous system NAT - Networking address translation SDN - Software defined networking LS - Link state routing algorithm DV - The distance-Vector routing algorithm ISP - Internet service provider IXP - Internet exchange point Link","title":"Internet protocol suite"},{"location":"ip_suite/#internet-protocol-suite","text":"Layer Data unit Delivery Protocols Diverse Application Message - HTTP ; SMTP ; IMAP ; POP3 ; BiTtorrent ; DNS ; DASH ; DHCP TLD ; NS ; RR ; DORA ; CDN ; OTT Transport Segment Process-to-process TCP ; UDP ; RDP; RDT RTT, GNB Internet Datagram Host-to-host IPv4 ; IPv6 ; Openflow ; RIP ; OSPF ; BGP ; iBGP ; eBGP ; ICMP; SNMP NAT; SDN ; LS ; DV ; AS; ISP; IXP Link Frame","title":"Internet protocol suite"},{"location":"ip_suite/#application","text":"DASH - Dynamic Adaptive Stream over HTTP DHCP - Dynamic Host Configuration Protocol DNS - Domain Name system HTTP - Hypertext Transfer Protocol IMAP - Internet Message Access Protocol POP3 - Post Office Protocol version 3 SMTP - Simple Mail Transfer Protocol","title":"Application"},{"location":"ip_suite/#diverse","text":"TLD DNS server - Top-level domain DNS server NS - Name Server RR - resource record DORA - Discover, Offer, Request, Acknowledgment CDN - Content distribution networks OTT - Over the top","title":"Diverse"},{"location":"ip_suite/#transport","text":"RDP - Reliable Data Protocol RDT - Reliable Data Transfer Protocol TCP - Transmission Control Protocol UDP - User Datagram Protocol","title":"Transport"},{"location":"ip_suite/#diverse_1","text":"RTT - round trip time GBN - Go-Back-N","title":"Diverse"},{"location":"ip_suite/#internet","text":"ICMP - The Internet Control Message Protocol IPv4 - Internet Protocol version 4 RIP - Routing Information Protocol SNMP - The simple network management protocol OSPF - Open shortest path first BGP - Border Gateway Protocol iBGP - Interior Border Gateway Protocol eBGP - Exterior Border Gateway Protocol ECN - Explicit Congestion Notification Openflow","title":"Internet"},{"location":"ip_suite/#diverse_2","text":"AS - autonomous system NAT - Networking address translation SDN - Software defined networking LS - Link state routing algorithm DV - The distance-Vector routing algorithm ISP - Internet service provider IXP - Internet exchange point","title":"Diverse"},{"location":"ip_suite/#link","text":"","title":"Link"},{"location":"network/","text":"Network layer 2 main functions of network layer Forwarding Routing Range Local. Moving packet from input to an appropriate output port Global. Moving a packet over multiple different routers and hubs Analogy Getting trough the single interchange Planning a trip from CPH to Paris Implementation Hardware Software Duration Nanoseconds Seconds Router Forwarding table(aka flow table) To identify the outgoing link interface for a arrived packet. Examine packet header and send to appropriate outgoing link Created be routing algorithm. Local decision to support global goals DHCP Dynamic Host Configuration Protocol allows a host to obtain an IP address automatically How does a host get an IP address? Manually - hard coded Automagically- DHCP Goal Dynamically Obtain IP Address Default Gateway (first hop router) DNS Server Subnet Mask Dora Discover message Client say I need a IP address. Send a message to everyone UDP port 67 Broadcast at a link level Offer message DHCP server will answer with offer, which contains the transaction ID of the received discover message, the proposed IP address for the client, the network mask and an IP address lease time yiaddr - as in \"your Internet address\" Request message Choose one DHCP server and respond with echoing back the configuration parameters ACK message Confirm the requested parameters * All four steps are needed to confirm DHCP server that the client will use that ip, because multiple DHCP servers are possible. What does router consist of ? Input ports \"ports\" refering to the physical input and output router interface. Here the forwarding table is consulted to determine the router output port to which an arriving packet will be forwarded via the switching fabric Switching fabric connects the router's input ports to its output ports Where forwarding happens Outout ports stores packets received from the swirching fabric and transmits these packets on the outgoing link Buffering. scheduling Router processing Brains, operations Perform control plane functions In SDN routers, the routing processor is responsible for communicating with the remote controller in order to receive forwarding table entries computed by the remote controller Switching fabric The main function of a switch fabric is to relay data efficiently and rapidly from its inputs to its outputs Memory based switching fabric vs Shared bus vs crossbar Memory based Shared bus Crossbar Copy in memory and out of memory Directly over a bus, Consist of 2N buses, capable of forwarding multiple packets in parallel Old-school, slow limited by bus bandwidth Complicated, Costly, Fast IP Ip address one for interface, that's 32-bit identifier for interface . So IP isn't numbering computers/hosts, but network interfaces. Or more specific the ip address is divided between the network address and a interface address What is CIDR? What does x mean in the ip address a.b.c.d/x Classless InterDomain Routering CIDR notation is a compact representation of an IP address and its associated network mask . subnet (logical subdivision of an IP network) portion of address of arbitrary length. Not only limited by 8bit boundaries network park of address is defined in x-bits. That's x = # bits in subnet portion solves a problem if you have more than 255 computers in a network by adding `/23 Subnet mask Subnet mask is another way defining /24 the subnet mask separates the IP address into the network and host addresses All 1's defines the network part Binary form Dot-decimal notation IP address 11000000.00000000.00000010.10000010 192.0.2.130 Subnet mask 11111111.11111111.11111111.00000000 255.255.255.0 Network prefix 11000000.00000000.00000010.00000000 192.0.2.0 Host identifier 00000000.00000000.00000000.10000010 0.0.0.130 List 2 ways used to extend the usage of IPv4 NAT Network Address Translation Use 1 global IP per LAN instead of having every public IP address for every computer Port identifies from which host is coming. IPv6 Initial Motivation Address Space IPv4 IPv6 32-bit 128-bit Optional section in a header Fixed header. Option could be added in payload Fragmentation is allowed No Fragmentation Checksum No checksum Flows and Priority for better service What is fragmentation? Take one big dataframe and make it to a number of smaller datagrams Flag an fragment offset in iP header are used to identify fragment and reassemble them \\text{Offset}=\\frac{\\text{Number of bytes}}{8} \\text{Offset}=\\frac{\\text{Number of bytes}}{8} * Routing algorithms Centralized vs Decentralized Centralized/Global Decentralized Protocol Link-state Distance-vector Algorithm Dijkstra Bellman-Ford Principle Use global information about the network. Iterative and distributed manner Input All nodes and all link cost. Only costs and DVs from neighbors Info. sharing type Broadcast Exchange Control plane Per router / Logically centralized Per router Convergence speed Faster Slower Msg. complexity Smaller Larger Robustness Higher Lower Static vs Dynamic Static Dynamic Changes as a result of human intervention Change the routing paths as the network traffic loads or topology changes or periodically More vulnerable to problem such as routing loops and route oscillation Costs Constant (e.g. 1) Bandwidth-Related Congestion-Related Dijkstra(Link State) Intro Global Knowledge. In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, with each link-state packet containing the identities and costs of its attached links Goal Find Least-Cost Paths Iterative Locally with the same input data Notations Description Notation Link cost c(x,y) Current cost to destination v D(v) Predecessor Node on Path to v p(v) Nodes with known path N' How does Djisktra Algorithm work? The main idea to keep the best path found until now and the reference to previous vertex. Let distance of start vertex from start vertex = 0 Let distances of all other vertices from start = infinity WHILE vertices remain unvisited Visit univisted vertex with smallest known distance from start vertex FOR EACH univisited neighbour of the current vertex Calculate the distance from start vertex IF the calculated distance of this vertex is less than the known distance Update shortest distance this vertex Update the previous vertex with the current vertex END IF Add the current vertex on the list of visited vertices END WHILE Youtube Dijkstra algorithm Bellman - ford(Distant Vector) Iterative - in that this process continues on until no more information is exchanged between neighbors Asynchronous - it does not require all of the nodes to operate in lockstep with each other Distributed - each node receives some information from on or more of its directly attached neighbors The current node only know the distances to neighbors and the shortest paths to all other nodes from these neighbors. By using this information and the equation below we can decide which path we should take: $$ d_x(y) = min_v[c(x,v)+d_v(y)] $$ Annotation Description c(x,v) c(x,v) cost from x to v d_x(y) d_x(y) cost of least-cost path from x to y min_v min_v min is taken over all neighbors v of x That's, how much it will cost if I take through this node, because I know my distance to it and his distances to all other nodes. Each neighbor see what his neighbors see. B-F Equation example d_v(z)=5 d_v(z)=5 d_x(z)=3 d_x(z)=3 d_w(z)=3 d_w(z)=3 d_x(y) = min_v[c(u,v)+d_v(z), c(u,x)+d_x(z), c(u,w)+d_w(z)] = \\\\ min_v[2+5, 1+3, 5+3] = 4 d_x(y) = min_v[c(u,v)+d_v(z), c(u,x)+d_x(z), c(u,w)+d_w(z)] = \\\\ min_v[2+5, 1+3, 5+3] = 4 Maintains D_x=[D_x(y):y\\in N] D_x=[D_x(y):y\\in N] - Node x maintains its own distance vector D_v=[D_v(y):y\\in N] D_v=[D_v(y):y\\in N] - Node x also maintains distance vectors for each neighbor v DV is big as nodes in the network Overview Send DV to Neighbors. Update DV using B-F Equation Repeat What is count to infinity Problem? One of the important issue in Distance Vector Routing is County of Infinity Problem. Counting to infinity is just another name for a routing loop. In distance vector routing, routing loops usually occur when an interface goes down. It can also occur when two routers send updates to each other at the same time. As you see in this graph, there is only one link between A and the other parts of the network. Now imagine that the link between A and B is cut. At this time, B corrects its table. After a specific amount of time, routers exchange their tables, and so B receives C's routing table. Since C doesn't know what has happened to the link between A and B, it says that it has a link to A with the weight of 2 (1 for C to B, and 1 for B to A -- it doesn't know B has no link to A). B receives this table and thinks there is a separate link between C and A, so it corrects its table and changes infinity to 3 (1 for B to C, and 2 for C to A, as C said). Once again, routers exchange their tables. When C receives B's routing table, it sees that B has changed the weight of its link to A from 1 to 3, so C updates its table and changes the weight of the link to A to 4 (1 for C to B, and 3 for B to A, as B said). This process loops until all nodes find out that the weight of link to A is infinity. Datagram The Internet\u2019s network layer is responsible for moving network-layer packets known as datagrams from one host to another. Autonomous systems (ASs) Group of routers in a region In order to solve scalability problems routers are organized into Autonomous Systems( ASs ) with each AS consisting of a group of routers that are under the same administrative control. Routers within the same AS all run the same routing algorithm and have information about each other. Why different Intra and Inter AS routing? Policy We ant to enforce different policies on different levels of our netwroks Scale Hierarchical routing in order to reduce the amount of updates we need to send everybody Save table size Performance In Intra performance is really important In Inter maybe policy would be more important than performance Intra AS routing Intra - is a prefix which means within or inside one group. Intra autonomous system is the routing algorithm running within an AS Routers in the same AS have to run the same routing protocols Common Intra-AS Routing protocols/ Interior gateway protocol RIP: Routing Information Protocol Distance Vector Algorithm Distance Metric number of hops (number of subnets) max = 15hops Response Message (or Advertisements) - sends DV Link Failure and Recovery: No Advertisement in 180sec = You're Dead RIP table processing route**d** UDP advertisiments OSPF: Open Shortest Path First Link state Dijkstra algorithm Advertisements Straight IP datagrams, not UDP Security All messages authenticated Multiple same cost paths Multiple cost metrics Integrated multicast multiple messages to multiple recipients Hierarchical OSPF 2 level Hierarchy Local Area Backbone EIGRP: Enhanced Interior Gateway Routing Protocol Inter AS routing Inter - is a prefix that means between two groups Routers in different ASs could run on different routing protocols BGP Routing among the ISPs Border Gateway Protocol The de facto standard Allows AS to Obtain Subnet Reachability Information Propagate Reachability Information to Internal Routers Determine Good Routes to External Subnets Reachability information Policy Destinations are prefixes NOT Hosts Prefix + Attributes = Route Advertised prefix includes BGP attributes 2 Important Attributes AS-PATH - path of AS that you have to pass in order to get to this prefix NEXT-HOP - IP address of the router interface that begins the AS-PATH Route Selection Local Preferences Value Attribute: Policy Decision Shortest AS-PATH Closest NEXT-HOP router: Hot potato routing Additional criteria BGP Messages Messages exchanged using TCP Types OPEN: opens TCP connection to peer and authenticate sender UPDATE: advertises new path(or withdraws old) KEEPALIVE: keeps connection alive in absence of UPDATES; also ACKs OPEN request NOTIFICATION: reports error in previous msg, also used to close connection iBGP vs eBGP BGP Peer BGP neighbors, called peers, are established by manual configuration among routers to create a TCP session on port 179. Two differenr BGP Sessions: iBGP eBGP Internal BGP External BGP When BGP runs between two peers in the same autonomous system (AS) When it runs between different autonomous systems BGP Routing Policy B shouldn't advertise path BAW to C, because B does not want to provide service for C when C can be get through A , so any routes that can be gotten to through other means we'd prefer that, because then B wasting its bandwidth Gateway routers Router that connects ASs have to use them if we have external destination Hot Potato Routing One of the simplest BGP routing algorithms ICMP Internet control message protocol is used by hosts and routers to communicate network layer information to each other. The most typical use of ICMP is for error reporting SNMP SNMP is an application-layer protocol used to convey netwrokd-management control and information messages between a managing server and an agent executing on behalf of the managing server SDN Software-defined networking ( SDN ) technology is an approach to network management that enables dynamic, programmatically efficient network configuration in order to improve network performance and monitoring, making it more like cloud computing than traditional network management Key characteristics of an SDN architecture: Packet forwarding can be based on any number of header fields. Rules are specified in a switch's flow table; it is the job of the SDN control plane to compute, manage and install flow table entries in all of the network switches Separation of data plane and control plane The data plane consists of the network switches- relatively simple(but fast) devices that execute the \"match+action\" rules in their flow tables. The control plane consists of servers and software that determine and manage the switches flow table Network control functions: external to data-plane switches The control plane itself consists of two components SDN controller - maintains accurate network state information Set of network control applications - Access control, Routing, Load balancer Programmable network The network is programmable through the network control applications running in the control plane. E.g. routing with Dijkstra algorithm That's data plane switches, SDN controllers and network control applications are separate entities. A controllers functionality can be organized into three layers: Forwarding Forwarding has two main operations: match and action. Match + action Match bits in arriving packet, take action Destination based forwarding Generalized forwarding Forward based on dest. IP address Many headers can determine action Many actions possible: drop/copy/modify/log packet Generalized forwarding Replaces Decision based forwarding Many more fields than destination address can be consulted and much wider range of actions Match+action OpenFlow - emerging standard for generalized forwarding Simple packet handling rules Match Pattern values in packet header fields Actions For matched packet: drop, forward, modify(e.g. NAT), matched packet or send matched packet to controller Priority Disambiguate overlapping patterns Counters #bytes and #packets OpenFlow Specific generalized forwarding, that has been standardized Unifies different kinds of devices Device Match Action Router Longest destination IP prefix Forward out a link Switch Destination MAC address Forward or flood Firewall IP addresses and TCP/UDP port numbers Permit or dent NAT IP address and port Rewrite address and port No need for routing protocols, because forwarding tables are computes in the SDN controller Hop A hop is a computer networking term that refers to the number of routers that a packet (a portion of data) passes through from its source to its destination. Hop","title":"Network layer"},{"location":"network/#network-layer","text":"","title":"Network layer"},{"location":"network/#2-main-functions-of-network-layer","text":"Forwarding Routing Range Local. Moving packet from input to an appropriate output port Global. Moving a packet over multiple different routers and hubs Analogy Getting trough the single interchange Planning a trip from CPH to Paris Implementation Hardware Software Duration Nanoseconds Seconds","title":"2 main functions of network layer"},{"location":"network/#router-forwarding-tableaka-flow-table","text":"To identify the outgoing link interface for a arrived packet. Examine packet header and send to appropriate outgoing link Created be routing algorithm. Local decision to support global goals","title":"Router Forwarding table(aka flow table)"},{"location":"network/#dhcp","text":"Dynamic Host Configuration Protocol allows a host to obtain an IP address automatically How does a host get an IP address? Manually - hard coded Automagically- DHCP Goal Dynamically Obtain IP Address Default Gateway (first hop router) DNS Server Subnet Mask","title":"DHCP"},{"location":"network/#dora","text":"Discover message Client say I need a IP address. Send a message to everyone UDP port 67 Broadcast at a link level Offer message DHCP server will answer with offer, which contains the transaction ID of the received discover message, the proposed IP address for the client, the network mask and an IP address lease time yiaddr - as in \"your Internet address\" Request message Choose one DHCP server and respond with echoing back the configuration parameters ACK message Confirm the requested parameters * All four steps are needed to confirm DHCP server that the client will use that ip, because multiple DHCP servers are possible.","title":"Dora"},{"location":"network/#what-does-router-consist-of","text":"Input ports \"ports\" refering to the physical input and output router interface. Here the forwarding table is consulted to determine the router output port to which an arriving packet will be forwarded via the switching fabric Switching fabric connects the router's input ports to its output ports Where forwarding happens Outout ports stores packets received from the swirching fabric and transmits these packets on the outgoing link Buffering. scheduling Router processing Brains, operations Perform control plane functions In SDN routers, the routing processor is responsible for communicating with the remote controller in order to receive forwarding table entries computed by the remote controller","title":"What does router consist of ?"},{"location":"network/#switching-fabric","text":"The main function of a switch fabric is to relay data efficiently and rapidly from its inputs to its outputs","title":"Switching fabric"},{"location":"network/#memory-based-switching-fabric-vs-shared-bus-vs-crossbar","text":"Memory based Shared bus Crossbar Copy in memory and out of memory Directly over a bus, Consist of 2N buses, capable of forwarding multiple packets in parallel Old-school, slow limited by bus bandwidth Complicated, Costly, Fast","title":"Memory based switching fabric vs Shared bus vs crossbar"},{"location":"network/#ip","text":"Ip address one for interface, that's 32-bit identifier for interface . So IP isn't numbering computers/hosts, but network interfaces. Or more specific the ip address is divided between the network address and a interface address","title":"IP"},{"location":"network/#what-is-cidr-what-does-x-mean-in-the-ip-address-abcdx","text":"Classless InterDomain Routering CIDR notation is a compact representation of an IP address and its associated network mask . subnet (logical subdivision of an IP network) portion of address of arbitrary length. Not only limited by 8bit boundaries network park of address is defined in x-bits. That's x = # bits in subnet portion solves a problem if you have more than 255 computers in a network by adding `/23","title":"What is CIDR? What does x mean in the ip address  a.b.c.d/x"},{"location":"network/#subnet-mask","text":"Subnet mask is another way defining /24 the subnet mask separates the IP address into the network and host addresses All 1's defines the network part Binary form Dot-decimal notation IP address 11000000.00000000.00000010.10000010 192.0.2.130 Subnet mask 11111111.11111111.11111111.00000000 255.255.255.0 Network prefix 11000000.00000000.00000010.00000000 192.0.2.0 Host identifier 00000000.00000000.00000000.10000010 0.0.0.130","title":"Subnet mask"},{"location":"network/#list-2-ways-used-to-extend-the-usage-of-ipv4","text":"","title":"List 2 ways used to extend the usage of IPv4"},{"location":"network/#nat","text":"Network Address Translation Use 1 global IP per LAN instead of having every public IP address for every computer Port identifies from which host is coming.","title":"NAT"},{"location":"network/#ipv6","text":"Initial Motivation Address Space IPv4 IPv6 32-bit 128-bit Optional section in a header Fixed header. Option could be added in payload Fragmentation is allowed No Fragmentation Checksum No checksum Flows and Priority for better service","title":"IPv6"},{"location":"network/#what-is-fragmentation","text":"Take one big dataframe and make it to a number of smaller datagrams Flag an fragment offset in iP header are used to identify fragment and reassemble them \\text{Offset}=\\frac{\\text{Number of bytes}}{8} \\text{Offset}=\\frac{\\text{Number of bytes}}{8} *","title":"What is fragmentation?"},{"location":"network/#routing-algorithms","text":"","title":"Routing algorithms"},{"location":"network/#centralized-vs-decentralized","text":"Centralized/Global Decentralized Protocol Link-state Distance-vector Algorithm Dijkstra Bellman-Ford Principle Use global information about the network. Iterative and distributed manner Input All nodes and all link cost. Only costs and DVs from neighbors Info. sharing type Broadcast Exchange Control plane Per router / Logically centralized Per router Convergence speed Faster Slower Msg. complexity Smaller Larger Robustness Higher Lower","title":"Centralized vs Decentralized"},{"location":"network/#static-vs-dynamic","text":"Static Dynamic Changes as a result of human intervention Change the routing paths as the network traffic loads or topology changes or periodically More vulnerable to problem such as routing loops and route oscillation","title":"Static vs Dynamic"},{"location":"network/#costs","text":"Constant (e.g. 1) Bandwidth-Related Congestion-Related","title":"Costs"},{"location":"network/#dijkstralink-state","text":"","title":"Dijkstra(Link State)"},{"location":"network/#intro","text":"Global Knowledge. In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, with each link-state packet containing the identities and costs of its attached links Goal Find Least-Cost Paths Iterative Locally with the same input data","title":"Intro"},{"location":"network/#notations","text":"Description Notation Link cost c(x,y) Current cost to destination v D(v) Predecessor Node on Path to v p(v) Nodes with known path N'","title":"Notations"},{"location":"network/#how-does-djisktra-algorithm-work","text":"The main idea to keep the best path found until now and the reference to previous vertex. Let distance of start vertex from start vertex = 0 Let distances of all other vertices from start = infinity WHILE vertices remain unvisited Visit univisted vertex with smallest known distance from start vertex FOR EACH univisited neighbour of the current vertex Calculate the distance from start vertex IF the calculated distance of this vertex is less than the known distance Update shortest distance this vertex Update the previous vertex with the current vertex END IF Add the current vertex on the list of visited vertices END WHILE Youtube Dijkstra algorithm","title":"How does Djisktra Algorithm work?"},{"location":"network/#bellman-forddistant-vector","text":"Iterative - in that this process continues on until no more information is exchanged between neighbors Asynchronous - it does not require all of the nodes to operate in lockstep with each other Distributed - each node receives some information from on or more of its directly attached neighbors The current node only know the distances to neighbors and the shortest paths to all other nodes from these neighbors. By using this information and the equation below we can decide which path we should take: $$ d_x(y) = min_v[c(x,v)+d_v(y)] $$ Annotation Description c(x,v) c(x,v) cost from x to v d_x(y) d_x(y) cost of least-cost path from x to y min_v min_v min is taken over all neighbors v of x That's, how much it will cost if I take through this node, because I know my distance to it and his distances to all other nodes. Each neighbor see what his neighbors see. B-F Equation example d_v(z)=5 d_v(z)=5 d_x(z)=3 d_x(z)=3 d_w(z)=3 d_w(z)=3 d_x(y) = min_v[c(u,v)+d_v(z), c(u,x)+d_x(z), c(u,w)+d_w(z)] = \\\\ min_v[2+5, 1+3, 5+3] = 4 d_x(y) = min_v[c(u,v)+d_v(z), c(u,x)+d_x(z), c(u,w)+d_w(z)] = \\\\ min_v[2+5, 1+3, 5+3] = 4 Maintains D_x=[D_x(y):y\\in N] D_x=[D_x(y):y\\in N] - Node x maintains its own distance vector D_v=[D_v(y):y\\in N] D_v=[D_v(y):y\\in N] - Node x also maintains distance vectors for each neighbor v DV is big as nodes in the network Overview Send DV to Neighbors. Update DV using B-F Equation Repeat","title":"Bellman - ford(Distant Vector)"},{"location":"network/#what-is-count-to-infinity-problem","text":"One of the important issue in Distance Vector Routing is County of Infinity Problem. Counting to infinity is just another name for a routing loop. In distance vector routing, routing loops usually occur when an interface goes down. It can also occur when two routers send updates to each other at the same time. As you see in this graph, there is only one link between A and the other parts of the network. Now imagine that the link between A and B is cut. At this time, B corrects its table. After a specific amount of time, routers exchange their tables, and so B receives C's routing table. Since C doesn't know what has happened to the link between A and B, it says that it has a link to A with the weight of 2 (1 for C to B, and 1 for B to A -- it doesn't know B has no link to A). B receives this table and thinks there is a separate link between C and A, so it corrects its table and changes infinity to 3 (1 for B to C, and 2 for C to A, as C said). Once again, routers exchange their tables. When C receives B's routing table, it sees that B has changed the weight of its link to A from 1 to 3, so C updates its table and changes the weight of the link to A to 4 (1 for C to B, and 3 for B to A, as B said). This process loops until all nodes find out that the weight of link to A is infinity.","title":"What is count to infinity Problem?"},{"location":"network/#datagram","text":"The Internet\u2019s network layer is responsible for moving network-layer packets known as datagrams from one host to another.","title":"Datagram"},{"location":"network/#autonomous-systems-ass","text":"Group of routers in a region In order to solve scalability problems routers are organized into Autonomous Systems( ASs ) with each AS consisting of a group of routers that are under the same administrative control. Routers within the same AS all run the same routing algorithm and have information about each other.","title":"Autonomous systems (ASs)"},{"location":"network/#why-different-intra-and-inter-as-routing","text":"Policy We ant to enforce different policies on different levels of our netwroks Scale Hierarchical routing in order to reduce the amount of updates we need to send everybody Save table size Performance In Intra performance is really important In Inter maybe policy would be more important than performance","title":"Why different Intra and Inter AS routing?"},{"location":"network/#intra-as-routing","text":"Intra - is a prefix which means within or inside one group. Intra autonomous system is the routing algorithm running within an AS Routers in the same AS have to run the same routing protocols","title":"Intra AS routing"},{"location":"network/#common-intra-as-routing-protocols-interior-gateway-protocol","text":"","title":"Common Intra-AS Routing protocols/ Interior gateway protocol"},{"location":"network/#rip-routing-information-protocol","text":"Distance Vector Algorithm Distance Metric number of hops (number of subnets) max = 15hops Response Message (or Advertisements) - sends DV Link Failure and Recovery: No Advertisement in 180sec = You're Dead RIP table processing route**d** UDP advertisiments","title":"RIP: Routing Information Protocol"},{"location":"network/#ospf-open-shortest-path-first","text":"Link state Dijkstra algorithm Advertisements Straight IP datagrams, not UDP Security All messages authenticated Multiple same cost paths Multiple cost metrics Integrated multicast multiple messages to multiple recipients Hierarchical OSPF 2 level Hierarchy Local Area Backbone","title":"OSPF: Open Shortest Path First"},{"location":"network/#eigrp-enhanced-interior-gateway-routing-protocol","text":"","title":"EIGRP: Enhanced Interior Gateway Routing Protocol"},{"location":"network/#inter-as-routing","text":"Inter - is a prefix that means between two groups Routers in different ASs could run on different routing protocols","title":"Inter AS routing"},{"location":"network/#bgp","text":"Routing among the ISPs Border Gateway Protocol The de facto standard Allows AS to Obtain Subnet Reachability Information Propagate Reachability Information to Internal Routers Determine Good Routes to External Subnets Reachability information Policy Destinations are prefixes NOT Hosts Prefix + Attributes = Route Advertised prefix includes BGP attributes 2 Important Attributes AS-PATH - path of AS that you have to pass in order to get to this prefix NEXT-HOP - IP address of the router interface that begins the AS-PATH Route Selection Local Preferences Value Attribute: Policy Decision Shortest AS-PATH Closest NEXT-HOP router: Hot potato routing Additional criteria BGP Messages Messages exchanged using TCP Types OPEN: opens TCP connection to peer and authenticate sender UPDATE: advertises new path(or withdraws old) KEEPALIVE: keeps connection alive in absence of UPDATES; also ACKs OPEN request NOTIFICATION: reports error in previous msg, also used to close connection","title":"BGP"},{"location":"network/#ibgp-vs-ebgp","text":"BGP Peer BGP neighbors, called peers, are established by manual configuration among routers to create a TCP session on port 179. Two differenr BGP Sessions: iBGP eBGP Internal BGP External BGP When BGP runs between two peers in the same autonomous system (AS) When it runs between different autonomous systems","title":"iBGP vs eBGP"},{"location":"network/#bgp-routing-policy","text":"B shouldn't advertise path BAW to C, because B does not want to provide service for C when C can be get through A , so any routes that can be gotten to through other means we'd prefer that, because then B wasting its bandwidth","title":"BGP Routing Policy"},{"location":"network/#gateway-routers","text":"Router that connects ASs have to use them if we have external destination","title":"Gateway routers"},{"location":"network/#hot-potato-routing","text":"One of the simplest BGP routing algorithms","title":"Hot Potato Routing"},{"location":"network/#icmp","text":"Internet control message protocol is used by hosts and routers to communicate network layer information to each other. The most typical use of ICMP is for error reporting","title":"ICMP"},{"location":"network/#snmp","text":"SNMP is an application-layer protocol used to convey netwrokd-management control and information messages between a managing server and an agent executing on behalf of the managing server","title":"SNMP"},{"location":"network/#sdn","text":"Software-defined networking ( SDN ) technology is an approach to network management that enables dynamic, programmatically efficient network configuration in order to improve network performance and monitoring, making it more like cloud computing than traditional network management Key characteristics of an SDN architecture: Packet forwarding can be based on any number of header fields. Rules are specified in a switch's flow table; it is the job of the SDN control plane to compute, manage and install flow table entries in all of the network switches Separation of data plane and control plane The data plane consists of the network switches- relatively simple(but fast) devices that execute the \"match+action\" rules in their flow tables. The control plane consists of servers and software that determine and manage the switches flow table Network control functions: external to data-plane switches The control plane itself consists of two components SDN controller - maintains accurate network state information Set of network control applications - Access control, Routing, Load balancer Programmable network The network is programmable through the network control applications running in the control plane. E.g. routing with Dijkstra algorithm That's data plane switches, SDN controllers and network control applications are separate entities. A controllers functionality can be organized into three layers:","title":"SDN"},{"location":"network/#forwarding","text":"Forwarding has two main operations: match and action.","title":"Forwarding"},{"location":"network/#match-action","text":"Match bits in arriving packet, take action Destination based forwarding Generalized forwarding Forward based on dest. IP address Many headers can determine action Many actions possible: drop/copy/modify/log packet","title":"Match + action"},{"location":"network/#generalized-forwarding","text":"Replaces Decision based forwarding Many more fields than destination address can be consulted and much wider range of actions Match+action OpenFlow - emerging standard for generalized forwarding Simple packet handling rules Match Pattern values in packet header fields Actions For matched packet: drop, forward, modify(e.g. NAT), matched packet or send matched packet to controller Priority Disambiguate overlapping patterns Counters #bytes and #packets","title":"Generalized forwarding"},{"location":"network/#openflow","text":"Specific generalized forwarding, that has been standardized Unifies different kinds of devices Device Match Action Router Longest destination IP prefix Forward out a link Switch Destination MAC address Forward or flood Firewall IP addresses and TCP/UDP port numbers Permit or dent NAT IP address and port Rewrite address and port No need for routing protocols, because forwarding tables are computes in the SDN controller","title":"OpenFlow"},{"location":"network/#hop","text":"A hop is a computer networking term that refers to the number of routers that a packet (a portion of data) passes through from its source to its destination. Hop","title":"Hop"},{"location":"practice_traceroute/","text":"Traceroute Each hop represented by a different line TTL how long a packet can live before it discarded. * * * means that the router at that hop doesn't respond to the packet. First column the number of hop. Second column destination address. Traceroute will actually send three packets of data, and measure the time taken for each - this is shown in the 3 columns after the destination eb.dk (base) arm@arm-DELL:~$ traceroute www.eb.dk traceroute to www.eb.dk (91.214.22.65), 30 hops max, 60 byte packets 1 _gateway (192.168.43.30) 156.456 ms 156.360 ms 156.414 ms 2 * * * 3 10.117.2.172 (10.117.2.172) 158.470 ms 158.430 ms 158.389 ms 4 10.219.160.20 (10.219.160.20) 158.348 ms * * 5 195-215-224-90-static.dk.customer.tdc.net (195.215.224.90) 301.828 ms 301.788 ms 301.747 ms 6 ae1-0.alb2nqp8.dk.ip.tdc.net (83.88.19.119) 301.709 ms 655.345 ms 655.230 ms 7 ae-6.edge2.Copenhagen2.Level3.net (4.68.72.193) 655.235 ms 654.950 ms 654.968 ms 8 213.242.108.194 (213.242.108.194) 654.853 ms 654.814 ms 654.772 ms 9 et-3-3-0-0.taas11cr1dk.gc-net.eu (77.243.32.202) 654.732 ms 654.691 ms 654.724 ms 10 212-98-126-214.hoer1cr1dk.gc-net.eu (212.98.126.214) 129.530 ms 129.451 ms 129.414 ms 11 * * * 12 * * * 13 * * * ... princeton.edu (base) arm@arm-DELL:~$ traceroute www.princeton.edu traceroute to www.princeton.edu (104.18.5.101), 30 hops max, 60 byte packets 1 _gateway (192.168.43.206) 7.518 ms 7.757 ms 7.844 ms 2 * * * 3 10.117.2.172 (10.117.2.172) 155.456 ms 155.414 ms 155.363 ms 4 10.219.160.20 (10.219.160.20) 155.313 ms 155.263 ms 155.213 ms 5 irb-610.alb2tdm13nqe2.dk.ip.tdc.net (195.215.224.90) 155.173 ms 155.150 ms 155.091 ms 6 ae0-0.alb2nqp8.dk.ip.tdc.net (83.88.19.117) 155.069 ms 18.168 ms 22.646 ms 7 peer-as13335.alb2nqp8.dk.ip.tdc.net (128.76.59.91) 942.923 ms 943.039 ms 943.030 ms 8 104.18.5.101 (104.18.5.101) 942.894 ms 942.884 ms 942.875 ms (base) arm@arm-DELL:~$","title":"Traceroute"},{"location":"practice_traceroute/#traceroute","text":"Each hop represented by a different line TTL how long a packet can live before it discarded. * * * means that the router at that hop doesn't respond to the packet. First column the number of hop. Second column destination address. Traceroute will actually send three packets of data, and measure the time taken for each - this is shown in the 3 columns after the destination","title":"Traceroute"},{"location":"practice_traceroute/#ebdk","text":"(base) arm@arm-DELL:~$ traceroute www.eb.dk traceroute to www.eb.dk (91.214.22.65), 30 hops max, 60 byte packets 1 _gateway (192.168.43.30) 156.456 ms 156.360 ms 156.414 ms 2 * * * 3 10.117.2.172 (10.117.2.172) 158.470 ms 158.430 ms 158.389 ms 4 10.219.160.20 (10.219.160.20) 158.348 ms * * 5 195-215-224-90-static.dk.customer.tdc.net (195.215.224.90) 301.828 ms 301.788 ms 301.747 ms 6 ae1-0.alb2nqp8.dk.ip.tdc.net (83.88.19.119) 301.709 ms 655.345 ms 655.230 ms 7 ae-6.edge2.Copenhagen2.Level3.net (4.68.72.193) 655.235 ms 654.950 ms 654.968 ms 8 213.242.108.194 (213.242.108.194) 654.853 ms 654.814 ms 654.772 ms 9 et-3-3-0-0.taas11cr1dk.gc-net.eu (77.243.32.202) 654.732 ms 654.691 ms 654.724 ms 10 212-98-126-214.hoer1cr1dk.gc-net.eu (212.98.126.214) 129.530 ms 129.451 ms 129.414 ms 11 * * * 12 * * * 13 * * * ...","title":"eb.dk"},{"location":"practice_traceroute/#princetonedu","text":"(base) arm@arm-DELL:~$ traceroute www.princeton.edu traceroute to www.princeton.edu (104.18.5.101), 30 hops max, 60 byte packets 1 _gateway (192.168.43.206) 7.518 ms 7.757 ms 7.844 ms 2 * * * 3 10.117.2.172 (10.117.2.172) 155.456 ms 155.414 ms 155.363 ms 4 10.219.160.20 (10.219.160.20) 155.313 ms 155.263 ms 155.213 ms 5 irb-610.alb2tdm13nqe2.dk.ip.tdc.net (195.215.224.90) 155.173 ms 155.150 ms 155.091 ms 6 ae0-0.alb2nqp8.dk.ip.tdc.net (83.88.19.117) 155.069 ms 18.168 ms 22.646 ms 7 peer-as13335.alb2nqp8.dk.ip.tdc.net (128.76.59.91) 942.923 ms 943.039 ms 943.030 ms 8 104.18.5.101 (104.18.5.101) 942.894 ms 942.884 ms 942.875 ms (base) arm@arm-DELL:~$","title":"princeton.edu"},{"location":"transport/","text":"Transport layer Bit error Send 1 and received 0, but all packet are still delivered Sockets Doors through which data passes from the network to the process and through which data passes from the process to the network. sockets are the only one API that sits between application layer and transport layer TCP sockets when contacted by client, server TCP creates new socket for server process to communicate with that particular client for the duration of that TCP connection allows server to talk with multiple client source port numbers used to distinguish clients TCP TCP (Transmission Control Protocol) is a Transport Layer host-to-host protocol for connection-oriented communication between two computers on an IP network. TCP uses virtual ports to create a virtual end-to-end connection that can reuse the physical connections between two computers. TCP encapsulates higher level protocol data such as HTTP and, SMTP (email). TCP It is specifically designed as a model to offer highly reliable and end-to-end byte stream over an unreliable internetwork. TCP TCP Handshake The TCP three-way handshake, also called the TCP-handshake, three message handshake, and/or SYN-SYN-ACK, is the method used by TCP to set up a TCP/IP connection over an IP-based network. The three messages transmitted by TCP to negotiate and start a TCP session are nicknamed SYN, SYN-ACK, ACK for SYNchronize, SYNchronize-ACKnowledgement, and ACKnowledge. The three message mechanism is designed for the two computers that want to pass information back and forth and can negotiate the parameters of the connection before transmitting data such as HTTP browser requests. TCP Handshake TCP fast retransmit If sender receives 3 ACKs for same data (\"triple dublicate ACKs\"), resend unACKed segment with smallest seq # likely that unACKed segment lost, so don't wait for timeout. UDP The User Datagram Protocol (UDP) is simplest Transport Layer communication protocol available of the TCP/IP protocol suite. It involves minimum amount of communication mechanism. UDP is said to be an unreliable transport protocol but it uses IP services which provides best effort delivery mechanism. In UDP, the receiver does not generate an acknowledgement of packet received and in turn, the sender does not wait for any acknowledgement of packet sent. This shortcoming makes this protocol unreliable as well as easier on processing. UDP tutorialspoint Connectionless TCP vs UDP TCP UDP TCP is a connection-oriented protocol. Connection-orientation means that the communicating devices should establish a connection before transmitting data and should close the connection after transmitting the data. UDP is the Datagram oriented protocol. This is because there is no overhead for opening a connection, maintaining a connection, and terminating a connection. UDP is efficient for broadcast and multicast type of network transmission. TCP is reliable as it guarantees delivery of data to the destination router. The delivery of data to the destination cannot be guaranteed in UDP. TCP provides extensive error checking mechanisms. It is because it provides flow control and acknowledgment of data. UDP has only the basic error checking mechanism using checksums. Sequencing of data is a feature of Transmission Control Protocol (TCP). this means that packets arrive in-order at the receiver. There is no sequencing of data in UDP. If ordering is required, it has to be managed by the application layer. TCP is comparatively slower than UDP. UDP is faster, simpler and more efficient than TCP. Retransmission of lost packets is possible in TCP, but not in UDP. There is no retransmission of lost packets in User Datagram Protocol (UDP). TCP has a (20-80) bytes variable length header. UDP has a 8 bytes fixed length header. TCP is heavy-weight. UDP is lightweight. TCP doesn\u2019t supports Broadcasting. UDP supports Broadcasting. TCP is used by HTTP, HTTPs, FTP, SMTP and Telnet. UDP is used by DNS, DHCP, TFTP, SNMP, RIP, and VoIP. TCP vs UDP Multiplexing vs Demultiplexing Extending host-to-host delivery to process-to-process delivery is called transport-layer multiplexing and demultiplexing. At the receiving end, the transport layer examines these fields to identidy the receiving socket and then directs the segments to the that socket. This job of delivering the data in a transport-layer segment to the correct socket is called demultiplexing . The job of gathering data chunks at he source host from different sockets, encapsulating each data chunk with header information(that will later be used in demultiplexing) to create segments, and passing the segments to the network layer is called multipplexing . Multiplexing Demultiplexing Where At sender At receiver Function Handle data from multiple sockets, add transport header Use header info to deliver received segments to correct sockets UDP Using destination port number(only) TCP Using 4-tuple: source and destination IP addresses, and port numbers CheckSum Checksum is the error detection method used by upper layer protocols. Example: If the data unit to be transmitted is 10101001 00111001, the following procedure is used at Sender site and Receiver site. Sender Site: 10101001 subunit 1 00111001 subunit 2 11100010 sum (using 1s complement) 00011101 checksum (complement of sum- that's swapping 0s and 1s) _______________________________ Data | Checksum --------------------|---------- 10101001 00111001 | 00011101 Receiver Site: 10101001 subunit 1 00111001 subunit 2 00011101 checksum 11111111 sum 00000000 sum's complement UDP TCP Entire UDP segment, except the checksum field itself, adn the IP sender and receive address fields(violates layering) What kind of errors can go undetected? If the corresponding bits are damaged of opposite sides. E.g. 1 st bit of subunit 1 is damaged and 1 st bit of subunit 2 is damaged Reliable Data transfer Number Feature/ Recover from 1.0 Send+receive 2.0 + Bit errors 2.1 + Sequence number(duplicates) 2.2 + Without NAK 3.0 + Packet lost Reliable data transfer protocols (RDT, RDP) are algorithmic measures to provide assurances of the reliable transfer of data across a network that may be subject to data loss and/or corruption. RDT involves sender-side and receiver-side sequences and variables to validate, acknowledge, and retransmit data when necessary. The goal of RDT protocols is to provide network and link layer service such that application and transport layer services can make guarantees about data delivery. Reliable Data Transfer Protocols must address the two primary concerns of data loss and data corruption . In network communications, these types of errors generally occur on the physical network hardware during buffering, propagation, and transmission actions. To address these concerns, senders and receivers need a way to communicate indirectly with respect to the receipt and validation of data being transmitted. In such cases where data has been lost or corrupted, RDT protocols dictate that data should be re-transmitted. At the most basic level, this introduces another concern of duplicate data into the mix. Data loss and corruption are the two primary concerns RDT seeks to address. The concern of duplicate data only arises through actions taken to address these first two concerns. As such, considering the issues of loss and corruption is a sensible place to begin considering the underlying function of RDT. RDT For connection-oriented service provided by TCP, it is necessary to have a reliable data transfer (RDT) protocol to ensure delivery of all packets and to enable the receiver to deliver the packets in order to its application layer. A simple alternating bit RDT protocol can be designed using some basic tools. This protocol is also known as a stop-and-wait protocol: after sending each packet the sender stops and waits for feedback from the receiver indicating that the packet has been received. Stop-and-wait RDT protocols have poor performance in a long-distance connection. At best, the sender can only transmit one packet per round-trip time. For a 1000 mile connection this amounts to approximately 1 packet (about 1500 bytes) every 20 ms. That results in a pathetic 75 KB per second rate. To improve transmission rates, a realistic RDT protocol must use pipelining. This allows the sender to have a large number of packets \"in the pipeline\". This phrase refers to packets that have been sent but whose receipt has not yet verified by the receiver. Reliable data transfer How can a protocol recover from errors? We need some feedback from receiver. Acknowledgements: ACKs - I got a packet OK Negative acknowledgement NAKs: A Packet was corrupted. Retransmission, if NAK How can it detect duplicates? Checking sequence number 0 or 1. Because there can only be one packet out at the time. If receiver get a duplicate just discard it. How can it recover from lost packets? Have timer and if in given time, ACK isn't received send a packet again How can it increase the link Utilization? Pipelined Protocol. Send out multiple packet in batch on the pipe before any ACK received yet. Go-back-N , says I have all the packets until N. Transmits all the packets after N (the last received) Selective Repeat, I didn't received that packet that and that packet. That's transmits only unACKed packets. Pipelining A pipeline sender can have transmitted multiple packets for which the sender has yet to recive an ACK from the receiver With a pipelined sender, there may be transmitted packets \"in flight\" - propagating through the channel - that the receiver has not yet received. Go-back-N vs Selective repeat Go-Back-N Protocol Selective Repeat Protocol In Go-Back-N Protocol, if the sent frame are find suspected then all the frames are re-transmitted from the lost packet to the last packet transmitted. In selective Repeat protocol, only those frames are re-transmitted which are found suspected. Sender window size of Go-Back-N Protocol is N. Sender window size of selective Repeat protocol is also N. Receiver window size of Go-Back-N Protocol is 1. Receiver window size of selective Repeat protocol is N. Go-Back-N Protocol is less complex. Selective Repeat protocol is more complex. In Go-Back-N Protocol, neither sender nor at receiver need sorting. In selective Repeat protocol, receiver side needs sorting to sort the frames. In Go-Back-N Protocol, type of Acknowledgement is cumulative. In selective Repeat protocol, type of Acknowledgement is individual. In Go-Back-N Protocol, Out-of-Order packets are NOT Accepted (discarded) and the entire window is re-transmitted. In selective Repeat protocol, Out-of-Order packets are Accepted. In Go-Back-N Protocol, if Receives receives a corrupt packet, then also, the entire window is re-transmitted. In selective Repeat protocol, if Receives receives a corrupt packet, it immediately sends a negative acknowledgement and hence only the selective packet is retransmitted. Cumulative ACK A cumulative ACK(n) acks all packets with sequence number up to and including n as being received Flow controlled Send will not overwhlem receiver Connection-oriented Handshaking","title":"Transport layer"},{"location":"transport/#transport-layer","text":"","title":"Transport layer"},{"location":"transport/#bit-error","text":"Send 1 and received 0, but all packet are still delivered","title":"Bit error"},{"location":"transport/#sockets","text":"Doors through which data passes from the network to the process and through which data passes from the process to the network. sockets are the only one API that sits between application layer and transport layer TCP sockets when contacted by client, server TCP creates new socket for server process to communicate with that particular client for the duration of that TCP connection allows server to talk with multiple client source port numbers used to distinguish clients","title":"Sockets"},{"location":"transport/#tcp","text":"TCP (Transmission Control Protocol) is a Transport Layer host-to-host protocol for connection-oriented communication between two computers on an IP network. TCP uses virtual ports to create a virtual end-to-end connection that can reuse the physical connections between two computers. TCP encapsulates higher level protocol data such as HTTP and, SMTP (email). TCP It is specifically designed as a model to offer highly reliable and end-to-end byte stream over an unreliable internetwork. TCP","title":"TCP"},{"location":"transport/#tcp-handshake","text":"The TCP three-way handshake, also called the TCP-handshake, three message handshake, and/or SYN-SYN-ACK, is the method used by TCP to set up a TCP/IP connection over an IP-based network. The three messages transmitted by TCP to negotiate and start a TCP session are nicknamed SYN, SYN-ACK, ACK for SYNchronize, SYNchronize-ACKnowledgement, and ACKnowledge. The three message mechanism is designed for the two computers that want to pass information back and forth and can negotiate the parameters of the connection before transmitting data such as HTTP browser requests. TCP Handshake","title":"TCP Handshake"},{"location":"transport/#tcp-fast-retransmit","text":"If sender receives 3 ACKs for same data (\"triple dublicate ACKs\"), resend unACKed segment with smallest seq # likely that unACKed segment lost, so don't wait for timeout.","title":"TCP fast retransmit"},{"location":"transport/#udp","text":"The User Datagram Protocol (UDP) is simplest Transport Layer communication protocol available of the TCP/IP protocol suite. It involves minimum amount of communication mechanism. UDP is said to be an unreliable transport protocol but it uses IP services which provides best effort delivery mechanism. In UDP, the receiver does not generate an acknowledgement of packet received and in turn, the sender does not wait for any acknowledgement of packet sent. This shortcoming makes this protocol unreliable as well as easier on processing. UDP tutorialspoint Connectionless","title":"UDP"},{"location":"transport/#tcp-vs-udp","text":"TCP UDP TCP is a connection-oriented protocol. Connection-orientation means that the communicating devices should establish a connection before transmitting data and should close the connection after transmitting the data. UDP is the Datagram oriented protocol. This is because there is no overhead for opening a connection, maintaining a connection, and terminating a connection. UDP is efficient for broadcast and multicast type of network transmission. TCP is reliable as it guarantees delivery of data to the destination router. The delivery of data to the destination cannot be guaranteed in UDP. TCP provides extensive error checking mechanisms. It is because it provides flow control and acknowledgment of data. UDP has only the basic error checking mechanism using checksums. Sequencing of data is a feature of Transmission Control Protocol (TCP). this means that packets arrive in-order at the receiver. There is no sequencing of data in UDP. If ordering is required, it has to be managed by the application layer. TCP is comparatively slower than UDP. UDP is faster, simpler and more efficient than TCP. Retransmission of lost packets is possible in TCP, but not in UDP. There is no retransmission of lost packets in User Datagram Protocol (UDP). TCP has a (20-80) bytes variable length header. UDP has a 8 bytes fixed length header. TCP is heavy-weight. UDP is lightweight. TCP doesn\u2019t supports Broadcasting. UDP supports Broadcasting. TCP is used by HTTP, HTTPs, FTP, SMTP and Telnet. UDP is used by DNS, DHCP, TFTP, SNMP, RIP, and VoIP. TCP vs UDP","title":"TCP vs UDP"},{"location":"transport/#multiplexing-vs-demultiplexing","text":"Extending host-to-host delivery to process-to-process delivery is called transport-layer multiplexing and demultiplexing. At the receiving end, the transport layer examines these fields to identidy the receiving socket and then directs the segments to the that socket. This job of delivering the data in a transport-layer segment to the correct socket is called demultiplexing . The job of gathering data chunks at he source host from different sockets, encapsulating each data chunk with header information(that will later be used in demultiplexing) to create segments, and passing the segments to the network layer is called multipplexing . Multiplexing Demultiplexing Where At sender At receiver Function Handle data from multiple sockets, add transport header Use header info to deliver received segments to correct sockets UDP Using destination port number(only) TCP Using 4-tuple: source and destination IP addresses, and port numbers","title":"Multiplexing vs Demultiplexing"},{"location":"transport/#checksum","text":"Checksum is the error detection method used by upper layer protocols. Example: If the data unit to be transmitted is 10101001 00111001, the following procedure is used at Sender site and Receiver site. Sender Site: 10101001 subunit 1 00111001 subunit 2 11100010 sum (using 1s complement) 00011101 checksum (complement of sum- that's swapping 0s and 1s) _______________________________ Data | Checksum --------------------|---------- 10101001 00111001 | 00011101 Receiver Site: 10101001 subunit 1 00111001 subunit 2 00011101 checksum 11111111 sum 00000000 sum's complement UDP TCP Entire UDP segment, except the checksum field itself, adn the IP sender and receive address fields(violates layering)","title":"CheckSum"},{"location":"transport/#what-kind-of-errors-can-go-undetected","text":"If the corresponding bits are damaged of opposite sides. E.g. 1 st bit of subunit 1 is damaged and 1 st bit of subunit 2 is damaged","title":"What kind of errors can go undetected?"},{"location":"transport/#reliable-data-transfer","text":"Number Feature/ Recover from 1.0 Send+receive 2.0 + Bit errors 2.1 + Sequence number(duplicates) 2.2 + Without NAK 3.0 + Packet lost Reliable data transfer protocols (RDT, RDP) are algorithmic measures to provide assurances of the reliable transfer of data across a network that may be subject to data loss and/or corruption. RDT involves sender-side and receiver-side sequences and variables to validate, acknowledge, and retransmit data when necessary. The goal of RDT protocols is to provide network and link layer service such that application and transport layer services can make guarantees about data delivery. Reliable Data Transfer Protocols must address the two primary concerns of data loss and data corruption . In network communications, these types of errors generally occur on the physical network hardware during buffering, propagation, and transmission actions. To address these concerns, senders and receivers need a way to communicate indirectly with respect to the receipt and validation of data being transmitted. In such cases where data has been lost or corrupted, RDT protocols dictate that data should be re-transmitted. At the most basic level, this introduces another concern of duplicate data into the mix. Data loss and corruption are the two primary concerns RDT seeks to address. The concern of duplicate data only arises through actions taken to address these first two concerns. As such, considering the issues of loss and corruption is a sensible place to begin considering the underlying function of RDT. RDT For connection-oriented service provided by TCP, it is necessary to have a reliable data transfer (RDT) protocol to ensure delivery of all packets and to enable the receiver to deliver the packets in order to its application layer. A simple alternating bit RDT protocol can be designed using some basic tools. This protocol is also known as a stop-and-wait protocol: after sending each packet the sender stops and waits for feedback from the receiver indicating that the packet has been received. Stop-and-wait RDT protocols have poor performance in a long-distance connection. At best, the sender can only transmit one packet per round-trip time. For a 1000 mile connection this amounts to approximately 1 packet (about 1500 bytes) every 20 ms. That results in a pathetic 75 KB per second rate. To improve transmission rates, a realistic RDT protocol must use pipelining. This allows the sender to have a large number of packets \"in the pipeline\". This phrase refers to packets that have been sent but whose receipt has not yet verified by the receiver. Reliable data transfer","title":"Reliable Data transfer"},{"location":"transport/#how-can-a-protocol-recover-from-errors","text":"We need some feedback from receiver. Acknowledgements: ACKs - I got a packet OK Negative acknowledgement NAKs: A Packet was corrupted. Retransmission, if NAK","title":"How can a protocol recover from errors?"},{"location":"transport/#how-can-it-detect-duplicates","text":"Checking sequence number 0 or 1. Because there can only be one packet out at the time. If receiver get a duplicate just discard it.","title":"How can it detect duplicates?"},{"location":"transport/#how-can-it-recover-from-lost-packets","text":"Have timer and if in given time, ACK isn't received send a packet again","title":"How can it recover from lost packets?"},{"location":"transport/#how-can-it-increase-the-link-utilization","text":"Pipelined Protocol. Send out multiple packet in batch on the pipe before any ACK received yet. Go-back-N , says I have all the packets until N. Transmits all the packets after N (the last received) Selective Repeat, I didn't received that packet that and that packet. That's transmits only unACKed packets.","title":"How can it increase the link Utilization?"},{"location":"transport/#pipelining","text":"A pipeline sender can have transmitted multiple packets for which the sender has yet to recive an ACK from the receiver With a pipelined sender, there may be transmitted packets \"in flight\" - propagating through the channel - that the receiver has not yet received.","title":"Pipelining"},{"location":"transport/#go-back-n-vs-selective-repeat","text":"Go-Back-N Protocol Selective Repeat Protocol In Go-Back-N Protocol, if the sent frame are find suspected then all the frames are re-transmitted from the lost packet to the last packet transmitted. In selective Repeat protocol, only those frames are re-transmitted which are found suspected. Sender window size of Go-Back-N Protocol is N. Sender window size of selective Repeat protocol is also N. Receiver window size of Go-Back-N Protocol is 1. Receiver window size of selective Repeat protocol is N. Go-Back-N Protocol is less complex. Selective Repeat protocol is more complex. In Go-Back-N Protocol, neither sender nor at receiver need sorting. In selective Repeat protocol, receiver side needs sorting to sort the frames. In Go-Back-N Protocol, type of Acknowledgement is cumulative. In selective Repeat protocol, type of Acknowledgement is individual. In Go-Back-N Protocol, Out-of-Order packets are NOT Accepted (discarded) and the entire window is re-transmitted. In selective Repeat protocol, Out-of-Order packets are Accepted. In Go-Back-N Protocol, if Receives receives a corrupt packet, then also, the entire window is re-transmitted. In selective Repeat protocol, if Receives receives a corrupt packet, it immediately sends a negative acknowledgement and hence only the selective packet is retransmitted.","title":"Go-back-N vs Selective repeat"},{"location":"transport/#cumulative-ack","text":"A cumulative ACK(n) acks all packets with sequence number up to and including n as being received","title":"Cumulative ACK"},{"location":"transport/#flow-controlled","text":"Send will not overwhlem receiver","title":"Flow controlled"},{"location":"transport/#connection-oriented","text":"Handshaking","title":"Connection-oriented"},{"location":"week1_book/","text":"Chapter 1 Review Questions R1 What is the difference between a host and an end system? List several different types of end systems. Is a Web server an end system? There is no difference. Throughout this text, the words \"host\" and \"end system\" are used interchangeably. End systems include PCs, workstations, Web servers, mail servers, PDAs, Internet-connnected game consoles, etc. R16 Consider sending a packet from a source host over a fixed route. List the delay components in the end-to-end delay. Which of these delays are constant and which are variable? The delay components are processing delays, transmission delays, propagation delays, and queuing delays. All of these delays are fixed, except for the queuing delays, which are variable. R19 Suppose Host A wants to send a large file to host B. The path from Host A to Host B has three links, of rates R1=500kbs, R2=2Mbps, and R3=1Mbps a) Assuming no ther traffic in the network, what is the throughput for the file transfer? 500kbs b) Suppose the file is 4 million bytes. Diving the file size by the throughout, roughly how long will it take to transfer the file to Host 4.000.000/(500000/8) = 64sec c) Repeat a) and b), but now with R_2 reduced to 100kbps a) 100kbp, b) 4.000.000/(100000/8)= 320sec P1 Design and describe an application-level protocol to be used between an automatic teller machine and a bank's centralized computer. Messages from ATM machine to Server Msg name purpose -------- ------- HELO <userid> Let server know that there is a card in the ATM machine ATM card transmits user ID to Server PASSWD <passwd> User enters PIN, which is sent to server BALANCE User requests balance WITHDRAWL <amount> User asks to withdraw money BYE user all done Messages from Server to ATM machine (display) Msg name purpose -------- ------- PASSWD Ask user for PIN (password) OK last requested operation (PASSWD, WITHDRAWL) OK ERR last requested operation (PASSWD, WITHDRAWL) in ERROR AMOUNT <amt> sent in response to BALANCE request BYE user done, display welcome screen at ATM Correct operation: client server HELO (userid) --------------> (check if valid userid) <------------- PASSWD PASSWD <passwd> --------------> (check password) <------------- OK (password is OK) BALANCE --------------> <------------- AMOUNT <amt> WITHDRAWL <amt> --------------> check if enough $ to cover withdrawl <------------- OK ATM dispenses $ BYE --------------> <------------- BYE P5 Review the car-caravn analogy in Section 1.4. Assume a propagtion speed of 100 km/hour. a) Suppose the carancan travels 150km, beginning in front of one tollbooth, passing through a second tollbooth, and finishing just after a third tollbooth. What is the end to-end delays? Transmission delay for all three tollbooth: 12*10*3 = 360sec = 6min 12*10*3 = 360sec = 6min Propagation delay: 150\u00f7100*60 = 90min 150\u00f7100*60 = 90min Total: 96min 96min b) Repeat a), now assuming that there are eith cars in the caravan instead of ten. Transmission delay for all three tollbooth: 12*8*3 = 288sec = 5min 12*8*3 = 288sec = 5min Propagation delay: 150\u00f7100*60 = 90min 150\u00f7100*60 = 90min Total: 95min 95min P6 This elementary problem begins to explore propagation delay and transmission delay, two central concepts in data networking. Consider two hosts, A and B, connected by a single link of rate R bps. Suppose that the two hosts are separated by m meters and suppose the propagation speed along the link is s meters/sec. Host A is to send a packet of size L bits to Host B. a) Express the propagation delay, d_{prop} d_{prop} , in terms of m and s d_{prop}=m/s d_{prop}=m/s b) Determine the transmission time of the packet d_{trans} d_{trans} in terms of L and R d_{trans}=L/R d_{trans}=L/R c) Ignoring processing and queuing delays, obtain an expression for the end-to-end delay d_{end-to-end}=(m/s+L/R) d_{end-to-end}=(m/s+L/R) d) Suppose Host A begins to transmit the packet at time t=0. At time t= d_{trans} d_{trans} , where is the last bit of the packet? The bit is just leaving Host A e) Suppose d_{prop} d_{prop} is greater than d_{trans} d_{trans} . At time t=d_{trans} t=d_{trans} , where is the first bit of the packet? The first bit is in the link and has not reached Host B f) Suppose d_{prop} d_{prop} is less than d_{trans} d_{trans} **. **At time t=d_{trans} t=d_{trans} **,**where is the first bit of the packet? The first bit has reached Host B g) Suppose s=2.5x108, L=120bits, and R=56kbps. Find the ditance m so that d_{prop} d_{prop} equals d_{trans} d_{trans} . d_{prop}=d_{trans} d_{prop}=d_{trans} m=\\frac{L}{R}s=536km m=\\frac{L}{R}s=536km","title":"Chapter 1 Review Questions"},{"location":"week1_book/#chapter-1-review-questions","text":"","title":"Chapter 1 Review Questions"},{"location":"week1_book/#r1","text":"What is the difference between a host and an end system? List several different types of end systems. Is a Web server an end system? There is no difference. Throughout this text, the words \"host\" and \"end system\" are used interchangeably. End systems include PCs, workstations, Web servers, mail servers, PDAs, Internet-connnected game consoles, etc.","title":"R1"},{"location":"week1_book/#r16","text":"Consider sending a packet from a source host over a fixed route. List the delay components in the end-to-end delay. Which of these delays are constant and which are variable? The delay components are processing delays, transmission delays, propagation delays, and queuing delays. All of these delays are fixed, except for the queuing delays, which are variable.","title":"R16"},{"location":"week1_book/#r19","text":"Suppose Host A wants to send a large file to host B. The path from Host A to Host B has three links, of rates R1=500kbs, R2=2Mbps, and R3=1Mbps","title":"R19"},{"location":"week1_book/#a","text":"Assuming no ther traffic in the network, what is the throughput for the file transfer? 500kbs","title":"a)"},{"location":"week1_book/#_1","text":"b) Suppose the file is 4 million bytes. Diving the file size by the throughout, roughly how long will it take to transfer the file to Host 4.000.000/(500000/8) = 64sec","title":""},{"location":"week1_book/#c","text":"Repeat a) and b), but now with R_2 reduced to 100kbps a) 100kbp, b) 4.000.000/(100000/8)= 320sec","title":"c)"},{"location":"week1_book/#p1","text":"Design and describe an application-level protocol to be used between an automatic teller machine and a bank's centralized computer. Messages from ATM machine to Server Msg name purpose -------- ------- HELO <userid> Let server know that there is a card in the ATM machine ATM card transmits user ID to Server PASSWD <passwd> User enters PIN, which is sent to server BALANCE User requests balance WITHDRAWL <amount> User asks to withdraw money BYE user all done Messages from Server to ATM machine (display) Msg name purpose -------- ------- PASSWD Ask user for PIN (password) OK last requested operation (PASSWD, WITHDRAWL) OK ERR last requested operation (PASSWD, WITHDRAWL) in ERROR AMOUNT <amt> sent in response to BALANCE request BYE user done, display welcome screen at ATM Correct operation: client server HELO (userid) --------------> (check if valid userid) <------------- PASSWD PASSWD <passwd> --------------> (check password) <------------- OK (password is OK) BALANCE --------------> <------------- AMOUNT <amt> WITHDRAWL <amt> --------------> check if enough $ to cover withdrawl <------------- OK ATM dispenses $ BYE --------------> <------------- BYE","title":"P1"},{"location":"week1_book/#p5","text":"Review the car-caravn analogy in Section 1.4. Assume a propagtion speed of 100 km/hour.","title":"P5"},{"location":"week1_book/#a_1","text":"Suppose the carancan travels 150km, beginning in front of one tollbooth, passing through a second tollbooth, and finishing just after a third tollbooth. What is the end to-end delays? Transmission delay for all three tollbooth: 12*10*3 = 360sec = 6min 12*10*3 = 360sec = 6min Propagation delay: 150\u00f7100*60 = 90min 150\u00f7100*60 = 90min Total: 96min 96min","title":"a)"},{"location":"week1_book/#b","text":"Repeat a), now assuming that there are eith cars in the caravan instead of ten. Transmission delay for all three tollbooth: 12*8*3 = 288sec = 5min 12*8*3 = 288sec = 5min Propagation delay: 150\u00f7100*60 = 90min 150\u00f7100*60 = 90min Total: 95min 95min","title":"b)"},{"location":"week1_book/#p6","text":"This elementary problem begins to explore propagation delay and transmission delay, two central concepts in data networking. Consider two hosts, A and B, connected by a single link of rate R bps. Suppose that the two hosts are separated by m meters and suppose the propagation speed along the link is s meters/sec. Host A is to send a packet of size L bits to Host B.","title":"P6"},{"location":"week1_book/#a_2","text":"Express the propagation delay, d_{prop} d_{prop} , in terms of m and s d_{prop}=m/s d_{prop}=m/s","title":"a)"},{"location":"week1_book/#b_1","text":"Determine the transmission time of the packet d_{trans} d_{trans} in terms of L and R d_{trans}=L/R d_{trans}=L/R","title":"b)"},{"location":"week1_book/#c_1","text":"Ignoring processing and queuing delays, obtain an expression for the end-to-end delay d_{end-to-end}=(m/s+L/R) d_{end-to-end}=(m/s+L/R)","title":"c)"},{"location":"week1_book/#d","text":"Suppose Host A begins to transmit the packet at time t=0. At time t= d_{trans} d_{trans} , where is the last bit of the packet? The bit is just leaving Host A","title":"d)"},{"location":"week1_book/#e","text":"Suppose d_{prop} d_{prop} is greater than d_{trans} d_{trans} . At time t=d_{trans} t=d_{trans} , where is the first bit of the packet? The first bit is in the link and has not reached Host B","title":"e)"},{"location":"week1_book/#f","text":"Suppose d_{prop} d_{prop} is less than d_{trans} d_{trans} **. **At time t=d_{trans} t=d_{trans} **,**where is the first bit of the packet? The first bit has reached Host B g) Suppose s=2.5x108, L=120bits, and R=56kbps. Find the ditance m so that d_{prop} d_{prop} equals d_{trans} d_{trans} . d_{prop}=d_{trans} d_{prop}=d_{trans} m=\\frac{L}{R}s=536km m=\\frac{L}{R}s=536km","title":"f)"},{"location":"week2_book/","text":"Chapter 2 Review Questions R2 What is the difference between network architecture and application architecture? Network architecture refers to the organization of the communication process into layers (e.g., the five-layer Internet architecture). Application architecture, on the other hand, is designed by an application developer and dictates the broad structure of the application (e.g., client-server or P2P). R4 For a P2P file-sharing application, do you agree with the statement, \u201cThere is no notion of client and server sides of a communication session\u201d? Why or why not? No. In a P2P file-sharing application, the peer that is receiving a file is typically the client and the peer that is sending the file is typically the server. R7 Referring to Figure 2.4 , we see that none of the applications listed in Figure 2.4 requires both no data loss and timing. Can you conceive of an application that requires no data loss and that is also highly time-sensitive? One such example is remote word processing, for example, with Google docs. However, because Google docs runs over the Internet (using TCP), timing guarantees are not provided. R9 Recall that TCP can be enhanced with SSL to provide process-to-process security services, including encryption. Does SSL operate at the transport layer or the application layer? If the application developer wants TCP to be enhanced with SSL, what does the developer have to do? SSL operates at the application layer. The SSL socket takes unencrypted data from the application layer, encrypts it and then passes it to the TCP socket. If the application developer wants TCP to be enhanced with SSL, she has to include the SSL code in the application. R10 What is meant by a handshaking protocol? A protocol uses handshaking if the two communicating entities first exchange control packets before sending data to each other. SMTP uses handshaking at the application layer whereas HTTP does not. R11 Why do HTTP, SMTP, and POP3 run on top of TCP rather than on UDP? The applications associated with those protocols require that all application data be received in the correct order and without gaps. TCP provides this service whereas UDP does not. R12 Consider an e-commerce site that wants to keep a purchase record for each of its customers. Describe how this can be done with cookies. When the user first visits the site, the server creates a unique identification number, creates an entry in its back-end database, and returns this identification number as a cookie number. This cookie number is stored on the user\u2019s host and is managed by the browser. During each subsequent visit (and purchase), the browser sends the cookie number back to the site. Thus the site knows when this user (more precisely, this browser) is visiting the site. R15 List several popular messaging apps. Do they use the same protocols as SMS? A list of several popular messaging apps: WhatsApp, Facebook Messenger, WeChat, and Snapchat. These apps use the different protocols than SMS. P1 True or false? a. FALSE: A user requests a Web page that consists of some text and three images. For this page, the client will send one request message and receive four response messages. b. TRUE: Two distinct Web pages (for example, www.mit.edu/research.html and www.mit.edu/students.html ) can be sent over the same persistent connection. c. FALSE:With nonpersistent connections between browser and origin server, it is possible for a single TCP segment to carry two distinct HTTP request messages. d. FALSE: The Date: header in the HTTP response message indicates when the object in the response was last modified. e. FALSE: HTTP response messages never have an empty message body. P3 Consider an HTTP client that wants to retrieve a Web document at a given URL. The IP address of the HTTP server is initially unknown. What transport and application-layer protocols besides HTTP are needed in this scenario? Application layer protocols: DNS and HTTP Transport layer protocols: UDP for DNS; TCP for HTTP P6 Obtain the HTTP/1.1 specification (RFC 2616). Answer the following questions: a Explain the mechanism used for signaling between the client and server to indicate that a persistent connection is being closed. Can the client, the server, or both signal the close of a connection? Persistent connections are discussed in section 8 of RFC 2616 (the real goal of this question was to get you to retrieve and read an RFC). Sections 8.1.2 and 8.1.2.1 of the RFC indicate that either the client or the server can indicate to the other that it is going to close the persistent connection. It does so by including the connection-token \"close\" in the Connection-header field of the http request/reply. b What encryption services are provided by HTTP? HTTP does not provide any encryption services. c Can a client open three or more simultaneous connections with a given server? (From RFC 2616) \u201cClients that use persistent connections should limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy.\u201d d Either a server or a client may close a transport connection between them if either one detects the connection has been idle for some time. Is it possible that one side starts closing a connection while the other side is transmitting data via this connection? Explain. Yes. (From RFC 2616) \u201cA client might have started to send a new request at the same time that the server has decided to close the \"idle\" connection. From the server's point of view, the connection is being closed while it was idle, but from the client's point of view, a request is in progress.\u201d","title":"Chapter 2 Review Questions"},{"location":"week2_book/#chapter-2-review-questions","text":"","title":"Chapter 2 Review Questions"},{"location":"week2_book/#r2","text":"What is the difference between network architecture and application architecture? Network architecture refers to the organization of the communication process into layers (e.g., the five-layer Internet architecture). Application architecture, on the other hand, is designed by an application developer and dictates the broad structure of the application (e.g., client-server or P2P).","title":"R2"},{"location":"week2_book/#r4","text":"For a P2P file-sharing application, do you agree with the statement, \u201cThere is no notion of client and server sides of a communication session\u201d? Why or why not? No. In a P2P file-sharing application, the peer that is receiving a file is typically the client and the peer that is sending the file is typically the server.","title":"R4"},{"location":"week2_book/#r7","text":"Referring to Figure 2.4 , we see that none of the applications listed in Figure 2.4 requires both no data loss and timing. Can you conceive of an application that requires no data loss and that is also highly time-sensitive? One such example is remote word processing, for example, with Google docs. However, because Google docs runs over the Internet (using TCP), timing guarantees are not provided.","title":"R7"},{"location":"week2_book/#r9","text":"Recall that TCP can be enhanced with SSL to provide process-to-process security services, including encryption. Does SSL operate at the transport layer or the application layer? If the application developer wants TCP to be enhanced with SSL, what does the developer have to do? SSL operates at the application layer. The SSL socket takes unencrypted data from the application layer, encrypts it and then passes it to the TCP socket. If the application developer wants TCP to be enhanced with SSL, she has to include the SSL code in the application.","title":"R9"},{"location":"week2_book/#r10","text":"What is meant by a handshaking protocol? A protocol uses handshaking if the two communicating entities first exchange control packets before sending data to each other. SMTP uses handshaking at the application layer whereas HTTP does not.","title":"R10"},{"location":"week2_book/#r11","text":"Why do HTTP, SMTP, and POP3 run on top of TCP rather than on UDP? The applications associated with those protocols require that all application data be received in the correct order and without gaps. TCP provides this service whereas UDP does not.","title":"R11"},{"location":"week2_book/#r12","text":"Consider an e-commerce site that wants to keep a purchase record for each of its customers. Describe how this can be done with cookies. When the user first visits the site, the server creates a unique identification number, creates an entry in its back-end database, and returns this identification number as a cookie number. This cookie number is stored on the user\u2019s host and is managed by the browser. During each subsequent visit (and purchase), the browser sends the cookie number back to the site. Thus the site knows when this user (more precisely, this browser) is visiting the site.","title":"R12"},{"location":"week2_book/#r15","text":"List several popular messaging apps. Do they use the same protocols as SMS? A list of several popular messaging apps: WhatsApp, Facebook Messenger, WeChat, and Snapchat. These apps use the different protocols than SMS.","title":"R15"},{"location":"week2_book/#p1","text":"True or false? a. FALSE: A user requests a Web page that consists of some text and three images. For this page, the client will send one request message and receive four response messages. b. TRUE: Two distinct Web pages (for example, www.mit.edu/research.html and www.mit.edu/students.html ) can be sent over the same persistent connection. c. FALSE:With nonpersistent connections between browser and origin server, it is possible for a single TCP segment to carry two distinct HTTP request messages. d. FALSE: The Date: header in the HTTP response message indicates when the object in the response was last modified. e. FALSE: HTTP response messages never have an empty message body.","title":"P1"},{"location":"week2_book/#p3","text":"Consider an HTTP client that wants to retrieve a Web document at a given URL. The IP address of the HTTP server is initially unknown. What transport and application-layer protocols besides HTTP are needed in this scenario? Application layer protocols: DNS and HTTP Transport layer protocols: UDP for DNS; TCP for HTTP","title":"P3"},{"location":"week2_book/#p6","text":"Obtain the HTTP/1.1 specification (RFC 2616). Answer the following questions:","title":"P6"},{"location":"week2_book/#a","text":"Explain the mechanism used for signaling between the client and server to indicate that a persistent connection is being closed. Can the client, the server, or both signal the close of a connection? Persistent connections are discussed in section 8 of RFC 2616 (the real goal of this question was to get you to retrieve and read an RFC). Sections 8.1.2 and 8.1.2.1 of the RFC indicate that either the client or the server can indicate to the other that it is going to close the persistent connection. It does so by including the connection-token \"close\" in the Connection-header field of the http request/reply.","title":"a"},{"location":"week2_book/#b","text":"What encryption services are provided by HTTP? HTTP does not provide any encryption services.","title":"b"},{"location":"week2_book/#c","text":"Can a client open three or more simultaneous connections with a given server? (From RFC 2616) \u201cClients that use persistent connections should limit the number of simultaneous connections that they maintain to a given server. A single-user client SHOULD NOT maintain more than 2 connections with any server or proxy.\u201d","title":"c"},{"location":"week2_book/#d","text":"Either a server or a client may close a transport connection between them if either one detects the connection has been idle for some time. Is it possible that one side starts closing a connection while the other side is transmitting data via this connection? Explain. Yes. (From RFC 2616) \u201cA client might have started to send a new request at the same time that the server has decided to close the \"idle\" connection. From the server's point of view, the connection is being closed while it was idle, but from the client's point of view, a request is in progress.\u201d","title":"d"}]}